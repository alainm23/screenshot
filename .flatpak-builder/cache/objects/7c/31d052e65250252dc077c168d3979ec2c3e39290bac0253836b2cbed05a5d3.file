/* ScreenshotBackend.c generated by valac 0.56.17, the Vala compiler
 * generated from ScreenshotBackend.vala, do not modify */

/*
* Copyright (c) 2014–2016 Fabio Zaramella <ffabio.96.x@gmail.com>
*               2017–2018 elementary LLC. (https://elementary.io)
*               2019 Alexander Mikhaylenko <exalm7659@gmail.com>
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License version 3 as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gdk/gdk.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREENSHOT_TYPE_SCREENSHOT_BACKEND (screenshot_screenshot_backend_get_type ())
#define SCREENSHOT_SCREENSHOT_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend))
#define SCREENSHOT_SCREENSHOT_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackendClass))
#define SCREENSHOT_IS_SCREENSHOT_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND))
#define SCREENSHOT_IS_SCREENSHOT_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_TYPE_SCREENSHOT_BACKEND))
#define SCREENSHOT_SCREENSHOT_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackendClass))

typedef struct _ScreenshotScreenshotBackend ScreenshotScreenshotBackend;
typedef struct _ScreenshotScreenshotBackendClass ScreenshotScreenshotBackendClass;
typedef struct _ScreenshotScreenshotBackendPrivate ScreenshotScreenshotBackendPrivate;

#define SCREENSHOT_TYPE_SCREENSHOT_PROXY (screenshot_screenshot_proxy_get_type ())
#define SCREENSHOT_SCREENSHOT_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_SCREENSHOT_PROXY, ScreenshotScreenshotProxy))
#define SCREENSHOT_IS_SCREENSHOT_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_SCREENSHOT_PROXY))
#define SCREENSHOT_SCREENSHOT_PROXY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SCREENSHOT_TYPE_SCREENSHOT_PROXY, ScreenshotScreenshotProxyIface))

typedef struct _ScreenshotScreenshotProxy ScreenshotScreenshotProxy;
typedef struct _ScreenshotScreenshotProxyIface ScreenshotScreenshotProxyIface;

#define SCREENSHOT_TYPE_SCREENSHOT_PROXY_PROXY (screenshot_screenshot_proxy_proxy_get_type ())
enum  {
	SCREENSHOT_SCREENSHOT_BACKEND_0_PROPERTY,
	SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY,
	SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY,
	SCREENSHOT_SCREENSHOT_BACKEND_NUM_PROPERTIES
};
static GParamSpec* screenshot_screenshot_backend_properties[SCREENSHOT_SCREENSHOT_BACKEND_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SCREENSHOT_TYPE_INTROSPECTABLE_PROXY (screenshot_introspectable_proxy_get_type ())
#define SCREENSHOT_INTROSPECTABLE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_INTROSPECTABLE_PROXY, ScreenshotIntrospectableProxy))
#define SCREENSHOT_IS_INTROSPECTABLE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_INTROSPECTABLE_PROXY))
#define SCREENSHOT_INTROSPECTABLE_PROXY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), SCREENSHOT_TYPE_INTROSPECTABLE_PROXY, ScreenshotIntrospectableProxyIface))

typedef struct _ScreenshotIntrospectableProxy ScreenshotIntrospectableProxy;
typedef struct _ScreenshotIntrospectableProxyIface ScreenshotIntrospectableProxyIface;

#define SCREENSHOT_TYPE_INTROSPECTABLE_PROXY_PROXY (screenshot_introspectable_proxy_proxy_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_dbus_interface_info_unref0(var) ((var == NULL) ? NULL : (var = (g_dbus_interface_info_unref (var), NULL)))
#define _g_dbus_node_info_unref0(var) ((var == NULL) ? NULL : (var = (g_dbus_node_info_unref (var), NULL)))
typedef enum  {
	SCREENSHOT_CAPTURE_TYPE_SCREEN,
	SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW,
	SCREENSHOT_CAPTURE_TYPE_AREA
} ScreenshotCaptureType;

#define SCREENSHOT_TYPE_CAPTURE_TYPE (screenshot_capture_type_get_type ())
#define __vala_GdkRectangle_free0(var) ((var == NULL) ? NULL : (var = (_vala_GdkRectangle_free (var), NULL)))
typedef struct _ScreenshotScreenshotBackendCaptureData ScreenshotScreenshotBackendCaptureData;
typedef struct _Block3Data Block3Data;
typedef struct _ScreenshotScreenshotBackendSleepData ScreenshotScreenshotBackendSleepData;
typedef struct _ScreenshotScreenshotBackendScreenshotAreaData ScreenshotScreenshotBackendScreenshotAreaData;
typedef struct _ScreenshotScreenshotBackendGetPixbufData ScreenshotScreenshotBackendGetPixbufData;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _ScreenshotScreenshotBackend {
	GObject parent_instance;
	ScreenshotScreenshotBackendPrivate * priv;
};

struct _ScreenshotScreenshotBackendClass {
	GObjectClass parent_class;
};

struct _ScreenshotScreenshotProxyIface {
	GTypeInterface parent_iface;
	void (*conceal_text) (ScreenshotScreenshotProxy* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*conceal_text_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, GError** error);
	void (*screenshot) (ScreenshotScreenshotProxy* self, gboolean include_cursor, gboolean flash, const gchar* filename, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*screenshot_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, gboolean* success, gchar** filename_used, GError** error);
	void (*screenshot_window) (ScreenshotScreenshotProxy* self, gboolean include_frame, gboolean include_cursor, gboolean flash, const gchar* filename, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*screenshot_window_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, gboolean* success, gchar** filename_used, GError** error);
	void (*screenshot_area) (ScreenshotScreenshotProxy* self, gint x, gint y, gint width, gint height, gboolean flash, const gchar* filename, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*screenshot_area_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, gboolean* success, gchar** filename_used, GError** error);
	void (*screenshot_area_with_cursor) (ScreenshotScreenshotProxy* self, gint x, gint y, gint width, gint height, gboolean include_cursor, gboolean flash, const gchar* filename, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*screenshot_area_with_cursor_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, gboolean* success, gchar** filename_used, GError** error);
	void (*select_area) (ScreenshotScreenshotProxy* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*select_area_finish) (ScreenshotScreenshotProxy* self, GAsyncResult* _res_, gint* x, gint* y, gint* width, gint* height, GError** error);
};

struct _ScreenshotScreenshotBackendPrivate {
	ScreenshotScreenshotProxy* proxy;
	gboolean _can_conceal_text;
	gboolean _can_screenshot_area_with_cursor;
};

struct _ScreenshotIntrospectableProxyIface {
	GTypeInterface parent_iface;
	gchar* (*introspect) (ScreenshotIntrospectableProxy* self, GError** error);
};

struct _ScreenshotScreenshotBackendCaptureData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotScreenshotBackend* self;
	ScreenshotCaptureType type;
	gint delay;
	gboolean include_pointer;
	gboolean redact;
	GdkPixbuf* result;
	GdkRectangle* rect;
	gboolean _tmp0_;
	GdkRectangle _tmp1_;
	GdkRectangle* _tmp2_;
	ScreenshotScreenshotProxy* _tmp3_;
	GdkRectangle* _tmp4_;
	GdkRectangle* _tmp5_;
	GdkRectangle* _tmp6_;
	GdkRectangle* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	gint _tmp10_;
	gint _tmp11_;
	ScreenshotScreenshotProxy* _tmp12_;
	GdkPixbuf* pixbuf;
	GdkRectangle* _tmp13_;
	GdkPixbuf* _tmp14_;
	GError* _inner_error0_;
};

struct _Block3Data {
	int _ref_count_;
	ScreenshotScreenshotBackend* self;
	gpointer _async_data_;
};

struct _ScreenshotScreenshotBackendSleepData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotScreenshotBackend* self;
	gint delay;
	Block3Data* _data3_;
};

struct _ScreenshotScreenshotBackendScreenshotAreaData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotScreenshotBackend* self;
	gint x;
	gint y;
	gint width;
	gint height;
	gboolean include_cursor;
	gboolean flash;
	gchar* filename;
	gboolean success;
	gchar* filename_used;
	gboolean _tmp0_;
	gboolean _tmp1_;
	ScreenshotScreenshotProxy* _tmp2_;
	gboolean _tmp3_;
	gchar* _tmp4_;
	ScreenshotScreenshotProxy* _tmp5_;
	gboolean _tmp6_;
	gchar* _tmp7_;
	GError* _inner_error0_;
};

struct _ScreenshotScreenshotBackendGetPixbufData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotScreenshotBackend* self;
	GdkRectangle* rect;
	ScreenshotCaptureType type;
	gboolean include_pointer;
	GdkPixbuf* result;
	gboolean success;
	gchar* filename_used;
	gchar* _tmp0_;
	gchar* tmp_filename;
	gchar* _tmp1_;
	ScreenshotScreenshotProxy* _tmp2_;
	const gchar* _tmp3_;
	gboolean _tmp4_;
	gchar* _tmp5_;
	ScreenshotScreenshotProxy* _tmp6_;
	const gchar* _tmp7_;
	gboolean _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gboolean _tmp11_;
	gchar* _tmp12_;
	GFile* file;
	const gchar* _tmp13_;
	GFile* _tmp14_;
	GFileInputStream* stream;
	GFile* _tmp15_;
	GFileInputStream* _tmp16_;
	GdkPixbuf* pixbuf;
	GFileInputStream* _tmp17_;
	GdkPixbuf* _tmp18_;
	GFileInputStream* _tmp19_;
	GFile* _tmp20_;
	GError* _inner_error0_;
};

static gint ScreenshotScreenshotBackend_private_offset;
static gpointer screenshot_screenshot_backend_parent_class = NULL;

VALA_EXTERN GType screenshot_screenshot_backend_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotScreenshotBackend, g_object_unref)
VALA_EXTERN GType screenshot_screenshot_proxy_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint screenshot_screenshot_proxy_register_object (void* object,
                                                   GDBusConnection* connection,
                                                   const gchar* path,
                                                   GError** error);
VALA_EXTERN GType screenshot_screenshot_proxy_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotScreenshotProxy, g_object_unref)
static void screenshot_screenshot_backend_get_capabilities (ScreenshotScreenshotBackend* self,
                                                     GError** error);
VALA_EXTERN GType screenshot_introspectable_proxy_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint screenshot_introspectable_proxy_register_object (void* object,
                                                       GDBusConnection* connection,
                                                       const gchar* path,
                                                       GError** error);
VALA_EXTERN GType screenshot_introspectable_proxy_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotIntrospectableProxy, g_object_unref)
VALA_EXTERN gchar* screenshot_introspectable_proxy_introspect (ScreenshotIntrospectableProxy* self,
                                                   GError** error);
static void screenshot_screenshot_backend_set_can_conceal_text (ScreenshotScreenshotBackend* self,
                                                         gboolean value);
static void screenshot_screenshot_backend_set_can_screenshot_area_with_cursor (ScreenshotScreenshotBackend* self,
                                                                        gboolean value);
static void screenshot_screenshot_backend_capture_data_free (gpointer _data);
VALA_EXTERN GType screenshot_capture_type_get_type (void) G_GNUC_CONST ;
VALA_EXTERN void screenshot_screenshot_backend_capture (ScreenshotScreenshotBackend* self,
                                            ScreenshotCaptureType type,
                                            gint delay,
                                            gboolean include_pointer,
                                            gboolean redact,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
VALA_EXTERN GdkPixbuf* screenshot_screenshot_backend_capture_finish (ScreenshotScreenshotBackend* self,
                                                         GAsyncResult* _res_,
                                                         GError** error);
static gboolean screenshot_screenshot_backend_capture_co (ScreenshotScreenshotBackendCaptureData* _data_);
VALA_EXTERN gboolean screenshot_screenshot_backend_get_can_conceal_text (ScreenshotScreenshotBackend* self);
static GdkRectangle* _vala_GdkRectangle_copy (GdkRectangle* self);
static void _vala_GdkRectangle_free (GdkRectangle* self);
VALA_EXTERN void screenshot_screenshot_proxy_select_area (ScreenshotScreenshotProxy* self,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_select_area_finish (ScreenshotScreenshotProxy* self,
                                                     GAsyncResult* _res_,
                                                     gint* x,
                                                     gint* y,
                                                     gint* width,
                                                     gint* height,
                                                     GError** error);
static void screenshot_screenshot_backend_capture_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_);
static void screenshot_screenshot_backend_sleep (ScreenshotScreenshotBackend* self,
                                          gint delay,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
static void screenshot_screenshot_backend_sleep_finish (ScreenshotScreenshotBackend* self,
                                                 GAsyncResult* _res_);
static gint screenshot_screenshot_backend_get_timeout (ScreenshotScreenshotBackend* self,
                                                gint delay,
                                                gboolean redact);
VALA_EXTERN void screenshot_screenshot_proxy_conceal_text (ScreenshotScreenshotProxy* self,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_conceal_text_finish (ScreenshotScreenshotProxy* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static void screenshot_screenshot_backend_get_pixbuf (ScreenshotScreenshotBackend* self,
                                               GdkRectangle* rect,
                                               ScreenshotCaptureType type,
                                               gboolean include_pointer,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static GdkPixbuf* screenshot_screenshot_backend_get_pixbuf_finish (ScreenshotScreenshotBackend* self,
                                                            GAsyncResult* _res_,
                                                            GError** error);
static void screenshot_screenshot_backend_sleep_data_free (gpointer _data);
static gboolean screenshot_screenshot_backend_sleep_co (ScreenshotScreenshotBackendSleepData* _data_);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
static gboolean __lambda15_ (Block3Data* _data3_);
static gboolean ___lambda15__gsource_func (gpointer self);
static void screenshot_screenshot_backend_screenshot_area_data_free (gpointer _data);
static void screenshot_screenshot_backend_screenshot_area (ScreenshotScreenshotBackend* self,
                                                    gint x,
                                                    gint y,
                                                    gint width,
                                                    gint height,
                                                    gboolean include_cursor,
                                                    gboolean flash,
                                                    const gchar* filename,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
static void screenshot_screenshot_backend_screenshot_area_finish (ScreenshotScreenshotBackend* self,
                                                           GAsyncResult* _res_,
                                                           gboolean* success,
                                                           gchar** filename_used,
                                                           GError** error);
static gboolean screenshot_screenshot_backend_screenshot_area_co (ScreenshotScreenshotBackendScreenshotAreaData* _data_);
VALA_EXTERN gboolean screenshot_screenshot_backend_get_can_screenshot_area_with_cursor (ScreenshotScreenshotBackend* self);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_area_with_cursor (ScreenshotScreenshotProxy* self,
                                                              gint x,
                                                              gint y,
                                                              gint width,
                                                              gint height,
                                                              gboolean include_cursor,
                                                              gboolean flash,
                                                              const gchar* filename,
                                                              GAsyncReadyCallback _callback_,
                                                              gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_area_with_cursor_finish (ScreenshotScreenshotProxy* self,
                                                                     GAsyncResult* _res_,
                                                                     gboolean* success,
                                                                     gchar** filename_used,
                                                                     GError** error);
static void screenshot_screenshot_backend_screenshot_area_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_area (ScreenshotScreenshotProxy* self,
                                                  gint x,
                                                  gint y,
                                                  gint width,
                                                  gint height,
                                                  gboolean flash,
                                                  const gchar* filename,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_area_finish (ScreenshotScreenshotProxy* self,
                                                         GAsyncResult* _res_,
                                                         gboolean* success,
                                                         gchar** filename_used,
                                                         GError** error);
static void screenshot_screenshot_backend_get_pixbuf_data_free (gpointer _data);
static gboolean screenshot_screenshot_backend_get_pixbuf_co (ScreenshotScreenshotBackendGetPixbufData* _data_);
static gchar* screenshot_screenshot_backend_get_tmp_filename (ScreenshotScreenshotBackend* self);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot (ScreenshotScreenshotProxy* self,
                                             gboolean include_cursor,
                                             gboolean flash,
                                             const gchar* filename,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_finish (ScreenshotScreenshotProxy* self,
                                                    GAsyncResult* _res_,
                                                    gboolean* success,
                                                    gchar** filename_used,
                                                    GError** error);
static void screenshot_screenshot_backend_get_pixbuf_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_window (ScreenshotScreenshotProxy* self,
                                                    gboolean include_frame,
                                                    gboolean include_cursor,
                                                    gboolean flash,
                                                    const gchar* filename,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
VALA_EXTERN void screenshot_screenshot_proxy_screenshot_window_finish (ScreenshotScreenshotProxy* self,
                                                           GAsyncResult* _res_,
                                                           gboolean* success,
                                                           gchar** filename_used,
                                                           GError** error);
VALA_EXTERN ScreenshotScreenshotBackend* screenshot_screenshot_backend_new (void);
VALA_EXTERN ScreenshotScreenshotBackend* screenshot_screenshot_backend_construct (GType object_type);
static GObject * screenshot_screenshot_backend_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static void screenshot_screenshot_backend_finalize (GObject * obj);
static GType screenshot_screenshot_backend_get_type_once (void);
static void _vala_screenshot_screenshot_backend_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_screenshot_screenshot_backend_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);

static inline gpointer
screenshot_screenshot_backend_get_instance_private (ScreenshotScreenshotBackend* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenshotScreenshotBackend_private_offset);
}

static gpointer
_g_dbus_interface_info_ref0 (gpointer self)
{
#line 50 "../src/ScreenshotBackend.vala"
	return self ? g_dbus_interface_info_ref (self) : NULL;
#line 448 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_get_capabilities (ScreenshotScreenshotBackend* self,
                                                GError** error)
{
	ScreenshotIntrospectableProxy* introspectable = NULL;
	ScreenshotIntrospectableProxy* _tmp0_;
	gchar* xml = NULL;
	ScreenshotIntrospectableProxy* _tmp1_;
	gchar* _tmp2_;
	GDBusNodeInfo* node = NULL;
	const gchar* _tmp3_;
	GDBusNodeInfo* _tmp4_;
	GDBusInterfaceInfo* iface = NULL;
	GDBusNodeInfo* _tmp5_;
	GDBusInterfaceInfo* _tmp6_;
	GDBusInterfaceInfo* _tmp7_;
	GDBusInterfaceInfo* _tmp8_;
	GDBusMethodInfo* _tmp9_;
	GDBusInterfaceInfo* _tmp10_;
	GDBusMethodInfo* _tmp11_;
	GError* _inner_error0_ = NULL;
#line 41 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 42 "../src/ScreenshotBackend.vala"
	_tmp0_ = (ScreenshotIntrospectableProxy*) g_initable_new (SCREENSHOT_TYPE_INTROSPECTABLE_PROXY_PROXY, NULL, &_inner_error0_, "g-flags", 0, "g-name", "org.gnome.Shell.Screenshot", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/gnome/Shell/Screenshot", "g-interface-name", "org.freedesktop.DBus.Introspectable", NULL);
#line 42 "../src/ScreenshotBackend.vala"
	introspectable = (ScreenshotIntrospectableProxy*) _tmp0_;
#line 42 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 42 "../src/ScreenshotBackend.vala"
		g_propagate_error (error, _inner_error0_);
#line 42 "../src/ScreenshotBackend.vala"
		return;
#line 484 "ScreenshotBackend.c"
	}
#line 47 "../src/ScreenshotBackend.vala"
	_tmp1_ = introspectable;
#line 47 "../src/ScreenshotBackend.vala"
	_tmp2_ = screenshot_introspectable_proxy_introspect (_tmp1_, &_inner_error0_);
#line 47 "../src/ScreenshotBackend.vala"
	xml = _tmp2_;
#line 47 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 47 "../src/ScreenshotBackend.vala"
		g_propagate_error (error, _inner_error0_);
#line 47 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (introspectable);
#line 47 "../src/ScreenshotBackend.vala"
		return;
#line 500 "ScreenshotBackend.c"
	}
#line 49 "../src/ScreenshotBackend.vala"
	_tmp3_ = xml;
#line 49 "../src/ScreenshotBackend.vala"
	_tmp4_ = g_dbus_node_info_new_for_xml (_tmp3_, &_inner_error0_);
#line 49 "../src/ScreenshotBackend.vala"
	node = _tmp4_;
#line 49 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 49 "../src/ScreenshotBackend.vala"
		g_propagate_error (error, _inner_error0_);
#line 49 "../src/ScreenshotBackend.vala"
		_g_free0 (xml);
#line 49 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (introspectable);
#line 49 "../src/ScreenshotBackend.vala"
		return;
#line 518 "ScreenshotBackend.c"
	}
#line 50 "../src/ScreenshotBackend.vala"
	_tmp5_ = node;
#line 50 "../src/ScreenshotBackend.vala"
	_tmp6_ = g_dbus_node_info_lookup_interface (_tmp5_, "org.gnome.Shell.Screenshot");
#line 50 "../src/ScreenshotBackend.vala"
	_tmp7_ = _g_dbus_interface_info_ref0 (_tmp6_);
#line 50 "../src/ScreenshotBackend.vala"
	iface = _tmp7_;
#line 51 "../src/ScreenshotBackend.vala"
	_tmp8_ = iface;
#line 51 "../src/ScreenshotBackend.vala"
	_tmp9_ = g_dbus_interface_info_lookup_method (_tmp8_, "ConcealText");
#line 51 "../src/ScreenshotBackend.vala"
	if (_tmp9_ != NULL) {
#line 52 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_set_can_conceal_text (self, TRUE);
#line 536 "ScreenshotBackend.c"
	}
#line 55 "../src/ScreenshotBackend.vala"
	_tmp10_ = iface;
#line 55 "../src/ScreenshotBackend.vala"
	_tmp11_ = g_dbus_interface_info_lookup_method (_tmp10_, "ScreenshotAreaWithCursor");
#line 55 "../src/ScreenshotBackend.vala"
	if (_tmp11_ != NULL) {
#line 56 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_set_can_screenshot_area_with_cursor (self, TRUE);
#line 546 "ScreenshotBackend.c"
	}
#line 41 "../src/ScreenshotBackend.vala"
	_g_dbus_interface_info_unref0 (iface);
#line 41 "../src/ScreenshotBackend.vala"
	_g_dbus_node_info_unref0 (node);
#line 41 "../src/ScreenshotBackend.vala"
	_g_free0 (xml);
#line 41 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (introspectable);
#line 556 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_capture_data_free (gpointer _data)
{
	ScreenshotScreenshotBackendCaptureData* _data_;
	_data_ = _data;
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->result);
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->self);
#line 23 "../src/ScreenshotBackend.vala"
	g_slice_free (ScreenshotScreenshotBackendCaptureData, _data_);
#line 570 "ScreenshotBackend.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 23 "../src/ScreenshotBackend.vala"
	return self ? g_object_ref (self) : NULL;
#line 578 "ScreenshotBackend.c"
}

void
screenshot_screenshot_backend_capture (ScreenshotScreenshotBackend* self,
                                       ScreenshotCaptureType type,
                                       gint delay,
                                       gboolean include_pointer,
                                       gboolean redact,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	ScreenshotScreenshotBackendCaptureData* _data_;
	ScreenshotScreenshotBackend* _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_slice_new0 (ScreenshotScreenshotBackendCaptureData);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 23 "../src/ScreenshotBackend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_screenshot_backend_capture_data_free);
#line 23 "../src/ScreenshotBackend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->self = _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->type = type;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->delay = delay;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->include_pointer = include_pointer;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->redact = redact;
#line 23 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_capture_co (_data_);
#line 614 "ScreenshotBackend.c"
}

GdkPixbuf*
screenshot_screenshot_backend_capture_finish (ScreenshotScreenshotBackend* self,
                                              GAsyncResult* _res_,
                                              GError** error)
{
	GdkPixbuf* result;
	ScreenshotScreenshotBackendCaptureData* _data_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 23 "../src/ScreenshotBackend.vala"
	if (NULL == _data_) {
#line 23 "../src/ScreenshotBackend.vala"
		return NULL;
#line 630 "ScreenshotBackend.c"
	}
#line 23 "../src/ScreenshotBackend.vala"
	result = _data_->result;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->result = NULL;
#line 23 "../src/ScreenshotBackend.vala"
	return result;
#line 638 "ScreenshotBackend.c"
}

static GdkRectangle*
_vala_GdkRectangle_copy (GdkRectangle* self)
{
#line 66 "../src/ScreenshotBackend.vala"
	return g_boxed_copy (gdk_rectangle_get_type (), self);
#line 646 "ScreenshotBackend.c"
}

static gpointer
__vala_GdkRectangle_copy0 (gpointer self)
{
#line 66 "../src/ScreenshotBackend.vala"
	return self ? _vala_GdkRectangle_copy (self) : NULL;
#line 654 "ScreenshotBackend.c"
}

static void
_vala_GdkRectangle_free (GdkRectangle* self)
{
#line 66 "../src/ScreenshotBackend.vala"
	g_boxed_free (gdk_rectangle_get_type (), self);
#line 662 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_capture_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_)
{
	ScreenshotScreenshotBackendCaptureData* _data_;
#line 67 "../src/ScreenshotBackend.vala"
	_data_ = _user_data_;
#line 67 "../src/ScreenshotBackend.vala"
	_data_->_source_object_ = source_object;
#line 67 "../src/ScreenshotBackend.vala"
	_data_->_res_ = _res_;
#line 67 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_capture_co (_data_);
#line 679 "ScreenshotBackend.c"
}

static gboolean
screenshot_screenshot_backend_capture_co (ScreenshotScreenshotBackendCaptureData* _data_)
{
#line 60 "../src/ScreenshotBackend.vala"
	switch (_data_->_state_) {
#line 60 "../src/ScreenshotBackend.vala"
		case 0:
#line 689 "ScreenshotBackend.c"
		goto _state_0;
#line 60 "../src/ScreenshotBackend.vala"
		case 1:
#line 693 "ScreenshotBackend.c"
		goto _state_1;
#line 60 "../src/ScreenshotBackend.vala"
		case 2:
#line 697 "ScreenshotBackend.c"
		goto _state_2;
#line 60 "../src/ScreenshotBackend.vala"
		case 3:
#line 701 "ScreenshotBackend.c"
		goto _state_3;
#line 60 "../src/ScreenshotBackend.vala"
		case 4:
#line 705 "ScreenshotBackend.c"
		goto _state_4;
#line 60 "../src/ScreenshotBackend.vala"
		case 5:
#line 709 "ScreenshotBackend.c"
		goto _state_5;
		default:
#line 60 "../src/ScreenshotBackend.vala"
		g_assert_not_reached ();
#line 714 "ScreenshotBackend.c"
	}
	_state_0:
#line 61 "../src/ScreenshotBackend.vala"
	_data_->rect = NULL;
#line 63 "../src/ScreenshotBackend.vala"
	_data_->_tmp0_ = _data_->self->priv->_can_conceal_text;
#line 63 "../src/ScreenshotBackend.vala"
	_data_->redact = _data_->redact & _data_->_tmp0_;
#line 65 "../src/ScreenshotBackend.vala"
	if (_data_->type == SCREENSHOT_CAPTURE_TYPE_AREA) {
#line 66 "../src/ScreenshotBackend.vala"
		memset (&_data_->_tmp1_, 0, sizeof (GdkRectangle));
#line 66 "../src/ScreenshotBackend.vala"
		_data_->_tmp2_ = __vala_GdkRectangle_copy0 (&_data_->_tmp1_);
#line 66 "../src/ScreenshotBackend.vala"
		__vala_GdkRectangle_free0 (_data_->rect);
#line 66 "../src/ScreenshotBackend.vala"
		_data_->rect = _data_->_tmp2_;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp3_ = _data_->self->priv->proxy;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp4_ = _data_->rect;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp5_ = _data_->rect;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp6_ = _data_->rect;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp7_ = _data_->rect;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp8_ = 0;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp9_ = 0;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp10_ = 0;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_tmp11_ = 0;
#line 67 "../src/ScreenshotBackend.vala"
		_data_->_state_ = 1;
#line 67 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_select_area (_data_->_tmp3_, screenshot_screenshot_backend_capture_ready, _data_);
#line 67 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 757 "ScreenshotBackend.c"
		_state_1:
#line 67 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_select_area_finish (_data_->_tmp3_, _data_->_res_, &_data_->_tmp8_, &_data_->_tmp9_, &_data_->_tmp10_, &_data_->_tmp11_, &_data_->_inner_error0_);
#line 67 "../src/ScreenshotBackend.vala"
		(*_data_->_tmp4_).x = _data_->_tmp8_;
#line 67 "../src/ScreenshotBackend.vala"
		(*_data_->_tmp5_).y = _data_->_tmp9_;
#line 67 "../src/ScreenshotBackend.vala"
		(*_data_->_tmp6_).width = _data_->_tmp10_;
#line 67 "../src/ScreenshotBackend.vala"
		(*_data_->_tmp7_).height = _data_->_tmp11_;
#line 67 "../src/ScreenshotBackend.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 67 "../src/ScreenshotBackend.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 67 "../src/ScreenshotBackend.vala"
			__vala_GdkRectangle_free0 (_data_->rect);
#line 67 "../src/ScreenshotBackend.vala"
			g_object_unref (_data_->_async_result);
#line 67 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 779 "ScreenshotBackend.c"
		}
	}
#line 70 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 2;
#line 70 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_sleep (_data_->self, screenshot_screenshot_backend_get_timeout (_data_->self, _data_->delay, _data_->redact), screenshot_screenshot_backend_capture_ready, _data_);
#line 70 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 788 "ScreenshotBackend.c"
	_state_2:
#line 70 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_sleep_finish (_data_->self, _data_->_res_);
#line 72 "../src/ScreenshotBackend.vala"
	if (_data_->redact) {
#line 73 "../src/ScreenshotBackend.vala"
		_data_->_tmp12_ = _data_->self->priv->proxy;
#line 73 "../src/ScreenshotBackend.vala"
		_data_->_state_ = 3;
#line 73 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_conceal_text (_data_->_tmp12_, screenshot_screenshot_backend_capture_ready, _data_);
#line 73 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 802 "ScreenshotBackend.c"
		_state_3:
#line 73 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_conceal_text_finish (_data_->_tmp12_, _data_->_res_, &_data_->_inner_error0_);
#line 73 "../src/ScreenshotBackend.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 73 "../src/ScreenshotBackend.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 73 "../src/ScreenshotBackend.vala"
			__vala_GdkRectangle_free0 (_data_->rect);
#line 73 "../src/ScreenshotBackend.vala"
			g_object_unref (_data_->_async_result);
#line 73 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 816 "ScreenshotBackend.c"
		}
#line 74 "../src/ScreenshotBackend.vala"
		_data_->_state_ = 4;
#line 74 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_sleep (_data_->self, 1000, screenshot_screenshot_backend_capture_ready, _data_);
#line 74 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 824 "ScreenshotBackend.c"
		_state_4:
#line 74 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_sleep_finish (_data_->self, _data_->_res_);
#line 828 "ScreenshotBackend.c"
	}
#line 77 "../src/ScreenshotBackend.vala"
	_data_->_tmp13_ = _data_->rect;
#line 77 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 5;
#line 77 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_get_pixbuf (_data_->self, _data_->_tmp13_, _data_->type, _data_->include_pointer, screenshot_screenshot_backend_capture_ready, _data_);
#line 77 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 838 "ScreenshotBackend.c"
	_state_5:
#line 77 "../src/ScreenshotBackend.vala"
	_data_->_tmp14_ = screenshot_screenshot_backend_get_pixbuf_finish (_data_->self, _data_->_res_, &_data_->_inner_error0_);
#line 77 "../src/ScreenshotBackend.vala"
	_data_->pixbuf = _data_->_tmp14_;
#line 77 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 77 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 77 "../src/ScreenshotBackend.vala"
		__vala_GdkRectangle_free0 (_data_->rect);
#line 77 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 77 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 854 "ScreenshotBackend.c"
	}
#line 79 "../src/ScreenshotBackend.vala"
	_data_->result = _data_->pixbuf;
#line 79 "../src/ScreenshotBackend.vala"
	__vala_GdkRectangle_free0 (_data_->rect);
#line 79 "../src/ScreenshotBackend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 79 "../src/ScreenshotBackend.vala"
	if (_data_->_state_ != 0) {
#line 79 "../src/ScreenshotBackend.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 79 "../src/ScreenshotBackend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 868 "ScreenshotBackend.c"
		}
	}
#line 79 "../src/ScreenshotBackend.vala"
	g_object_unref (_data_->_async_result);
#line 79 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 875 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_sleep_data_free (gpointer _data)
{
	ScreenshotScreenshotBackendSleepData* _data_;
	_data_ = _data;
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->self);
#line 23 "../src/ScreenshotBackend.vala"
	g_slice_free (ScreenshotScreenshotBackendSleepData, _data_);
#line 887 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_sleep (ScreenshotScreenshotBackend* self,
                                     gint delay,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	ScreenshotScreenshotBackendSleepData* _data_;
	ScreenshotScreenshotBackend* _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_slice_new0 (ScreenshotScreenshotBackendSleepData);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 23 "../src/ScreenshotBackend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_screenshot_backend_sleep_data_free);
#line 23 "../src/ScreenshotBackend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->self = _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->delay = delay;
#line 23 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_sleep_co (_data_);
#line 914 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_sleep_finish (ScreenshotScreenshotBackend* self,
                                            GAsyncResult* _res_)
{
	ScreenshotScreenshotBackendSleepData* _data_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 924 "ScreenshotBackend.c"
}

static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
#line 82 "../src/ScreenshotBackend.vala"
	g_atomic_int_inc (&_data3_->_ref_count_);
#line 82 "../src/ScreenshotBackend.vala"
	return _data3_;
#line 934 "ScreenshotBackend.c"
}

static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
#line 82 "../src/ScreenshotBackend.vala"
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
#line 944 "ScreenshotBackend.c"
		ScreenshotScreenshotBackend* self;
#line 82 "../src/ScreenshotBackend.vala"
		self = _data3_->self;
#line 82 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (self);
#line 82 "../src/ScreenshotBackend.vala"
		g_slice_free (Block3Data, _data3_);
#line 952 "ScreenshotBackend.c"
	}
}

static gboolean
__lambda15_ (Block3Data* _data3_)
{
	ScreenshotScreenshotBackend* self;
	gboolean result;
#line 83 "../src/ScreenshotBackend.vala"
	self = _data3_->self;
#line 84 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_sleep_co (_data3_->_async_data_);
#line 85 "../src/ScreenshotBackend.vala"
	result = G_SOURCE_REMOVE;
#line 85 "../src/ScreenshotBackend.vala"
	return result;
#line 969 "ScreenshotBackend.c"
}

static gboolean
___lambda15__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda15_ (self);
#line 83 "../src/ScreenshotBackend.vala"
	return result;
#line 979 "ScreenshotBackend.c"
}

static gboolean
screenshot_screenshot_backend_sleep_co (ScreenshotScreenshotBackendSleepData* _data_)
{
#line 82 "../src/ScreenshotBackend.vala"
	switch (_data_->_state_) {
#line 82 "../src/ScreenshotBackend.vala"
		case 0:
#line 989 "ScreenshotBackend.c"
		goto _state_0;
#line 82 "../src/ScreenshotBackend.vala"
		case 1:
#line 993 "ScreenshotBackend.c"
		goto _state_1;
		default:
#line 82 "../src/ScreenshotBackend.vala"
		g_assert_not_reached ();
#line 998 "ScreenshotBackend.c"
	}
	_state_0:
#line 82 "../src/ScreenshotBackend.vala"
	_data_->_data3_ = g_slice_new0 (Block3Data);
#line 82 "../src/ScreenshotBackend.vala"
	_data_->_data3_->_ref_count_ = 1;
#line 82 "../src/ScreenshotBackend.vala"
	_data_->_data3_->self = g_object_ref (_data_->self);
#line 82 "../src/ScreenshotBackend.vala"
	_data_->_data3_->_async_data_ = _data_;
#line 83 "../src/ScreenshotBackend.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) _data_->delay, ___lambda15__gsource_func, block3_data_ref (_data_->_data3_), block3_data_unref);
#line 87 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 1;
#line 87 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1015 "ScreenshotBackend.c"
	_state_1:
	;
#line 82 "../src/ScreenshotBackend.vala"
	block3_data_unref (_data_->_data3_);
#line 82 "../src/ScreenshotBackend.vala"
	_data_->_data3_ = NULL;
#line 82 "../src/ScreenshotBackend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 82 "../src/ScreenshotBackend.vala"
	if (_data_->_state_ != 0) {
#line 82 "../src/ScreenshotBackend.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 82 "../src/ScreenshotBackend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1030 "ScreenshotBackend.c"
		}
	}
#line 82 "../src/ScreenshotBackend.vala"
	g_object_unref (_data_->_async_result);
#line 82 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1037 "ScreenshotBackend.c"
}

static gint
screenshot_screenshot_backend_get_timeout (ScreenshotScreenshotBackend* self,
                                           gint delay,
                                           gboolean redact)
{
	gint timeout = 0;
	gint result;
#line 90 "../src/ScreenshotBackend.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 91 "../src/ScreenshotBackend.vala"
	timeout = delay * 1000;
#line 93 "../src/ScreenshotBackend.vala"
	if (redact) {
#line 94 "../src/ScreenshotBackend.vala"
		timeout -= 1000;
#line 1055 "ScreenshotBackend.c"
	}
#line 97 "../src/ScreenshotBackend.vala"
	if (timeout < 300) {
#line 98 "../src/ScreenshotBackend.vala"
		timeout = 300;
#line 1061 "ScreenshotBackend.c"
	}
#line 101 "../src/ScreenshotBackend.vala"
	result = timeout;
#line 101 "../src/ScreenshotBackend.vala"
	return result;
#line 1067 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_screenshot_area_data_free (gpointer _data)
{
	ScreenshotScreenshotBackendScreenshotAreaData* _data_;
	_data_ = _data;
#line 23 "../src/ScreenshotBackend.vala"
	_g_free0 (_data_->filename);
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->self);
#line 23 "../src/ScreenshotBackend.vala"
	g_slice_free (ScreenshotScreenshotBackendScreenshotAreaData, _data_);
#line 1081 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_screenshot_area (ScreenshotScreenshotBackend* self,
                                               gint x,
                                               gint y,
                                               gint width,
                                               gint height,
                                               gboolean include_cursor,
                                               gboolean flash,
                                               const gchar* filename,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	ScreenshotScreenshotBackendScreenshotAreaData* _data_;
	ScreenshotScreenshotBackend* _tmp0_;
	gchar* _tmp1_;
#line 23 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/ScreenshotBackend.vala"
	g_return_if_fail (filename != NULL);
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_slice_new0 (ScreenshotScreenshotBackendScreenshotAreaData);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 23 "../src/ScreenshotBackend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_screenshot_backend_screenshot_area_data_free);
#line 23 "../src/ScreenshotBackend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->self = _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->x = x;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->y = y;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->width = width;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->height = height;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->include_cursor = include_cursor;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->flash = flash;
#line 23 "../src/ScreenshotBackend.vala"
	_tmp1_ = g_strdup (filename);
#line 23 "../src/ScreenshotBackend.vala"
	_g_free0 (_data_->filename);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->filename = _tmp1_;
#line 23 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_screenshot_area_co (_data_);
#line 1133 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_screenshot_area_finish (ScreenshotScreenshotBackend* self,
                                                      GAsyncResult* _res_,
                                                      gboolean* success,
                                                      gchar** filename_used,
                                                      GError** error)
{
	ScreenshotScreenshotBackendScreenshotAreaData* _data_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 23 "../src/ScreenshotBackend.vala"
	if (NULL == _data_) {
#line 23 "../src/ScreenshotBackend.vala"
		return;
#line 1150 "ScreenshotBackend.c"
	}
#line 23 "../src/ScreenshotBackend.vala"
	if (success) {
#line 23 "../src/ScreenshotBackend.vala"
		*success = _data_->success;
#line 1156 "ScreenshotBackend.c"
	}
#line 23 "../src/ScreenshotBackend.vala"
	if (filename_used) {
#line 23 "../src/ScreenshotBackend.vala"
		*filename_used = _data_->filename_used;
#line 1162 "ScreenshotBackend.c"
	} else {
#line 23 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 1166 "ScreenshotBackend.c"
	}
#line 23 "../src/ScreenshotBackend.vala"
	_data_->filename_used = NULL;
#line 1170 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_screenshot_area_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	ScreenshotScreenshotBackendScreenshotAreaData* _data_;
#line 106 "../src/ScreenshotBackend.vala"
	_data_ = _user_data_;
#line 106 "../src/ScreenshotBackend.vala"
	_data_->_source_object_ = source_object;
#line 106 "../src/ScreenshotBackend.vala"
	_data_->_res_ = _res_;
#line 106 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_screenshot_area_co (_data_);
#line 1187 "ScreenshotBackend.c"
}

static gboolean
screenshot_screenshot_backend_screenshot_area_co (ScreenshotScreenshotBackendScreenshotAreaData* _data_)
{
#line 104 "../src/ScreenshotBackend.vala"
	switch (_data_->_state_) {
#line 104 "../src/ScreenshotBackend.vala"
		case 0:
#line 1197 "ScreenshotBackend.c"
		goto _state_0;
#line 104 "../src/ScreenshotBackend.vala"
		case 1:
#line 1201 "ScreenshotBackend.c"
		goto _state_1;
#line 104 "../src/ScreenshotBackend.vala"
		case 2:
#line 1205 "ScreenshotBackend.c"
		goto _state_2;
		default:
#line 104 "../src/ScreenshotBackend.vala"
		g_assert_not_reached ();
#line 1210 "ScreenshotBackend.c"
	}
	_state_0:
#line 105 "../src/ScreenshotBackend.vala"
	if (_data_->include_cursor) {
#line 105 "../src/ScreenshotBackend.vala"
		_data_->_tmp1_ = _data_->self->priv->_can_screenshot_area_with_cursor;
#line 105 "../src/ScreenshotBackend.vala"
		_data_->_tmp0_ = _data_->_tmp1_;
#line 1219 "ScreenshotBackend.c"
	} else {
#line 105 "../src/ScreenshotBackend.vala"
		_data_->_tmp0_ = FALSE;
#line 1223 "ScreenshotBackend.c"
	}
#line 105 "../src/ScreenshotBackend.vala"
	if (_data_->_tmp0_) {
#line 106 "../src/ScreenshotBackend.vala"
		_data_->_tmp2_ = _data_->self->priv->proxy;
#line 106 "../src/ScreenshotBackend.vala"
		_data_->_tmp3_ = FALSE;
#line 106 "../src/ScreenshotBackend.vala"
		_data_->_tmp4_ = NULL;
#line 106 "../src/ScreenshotBackend.vala"
		_data_->_state_ = 1;
#line 106 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_screenshot_area_with_cursor (_data_->_tmp2_, _data_->x, _data_->y, _data_->width, _data_->height, TRUE, _data_->flash, _data_->filename, screenshot_screenshot_backend_screenshot_area_ready, _data_);
#line 106 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1239 "ScreenshotBackend.c"
		_state_1:
#line 106 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_proxy_screenshot_area_with_cursor_finish (_data_->_tmp2_, _data_->_res_, &_data_->_tmp3_, &_data_->_tmp4_, &_data_->_inner_error0_);
#line 106 "../src/ScreenshotBackend.vala"
		_data_->success = _data_->_tmp3_;
#line 106 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 106 "../src/ScreenshotBackend.vala"
		_data_->filename_used = _data_->_tmp4_;
#line 106 "../src/ScreenshotBackend.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 106 "../src/ScreenshotBackend.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 106 "../src/ScreenshotBackend.vala"
			_g_free0 (_data_->filename_used);
#line 106 "../src/ScreenshotBackend.vala"
			g_object_unref (_data_->_async_result);
#line 106 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 1259 "ScreenshotBackend.c"
		}
#line 109 "../src/ScreenshotBackend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 109 "../src/ScreenshotBackend.vala"
		if (_data_->_state_ != 0) {
#line 109 "../src/ScreenshotBackend.vala"
			while (!g_task_get_completed (_data_->_async_result)) {
#line 109 "../src/ScreenshotBackend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1269 "ScreenshotBackend.c"
			}
		}
#line 109 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 109 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1276 "ScreenshotBackend.c"
	}
#line 112 "../src/ScreenshotBackend.vala"
	_data_->_tmp5_ = _data_->self->priv->proxy;
#line 112 "../src/ScreenshotBackend.vala"
	_data_->_tmp6_ = FALSE;
#line 112 "../src/ScreenshotBackend.vala"
	_data_->_tmp7_ = NULL;
#line 112 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 2;
#line 112 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_proxy_screenshot_area (_data_->_tmp5_, _data_->x, _data_->y, _data_->width, _data_->height, _data_->flash, _data_->filename, screenshot_screenshot_backend_screenshot_area_ready, _data_);
#line 112 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1290 "ScreenshotBackend.c"
	_state_2:
#line 112 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_proxy_screenshot_area_finish (_data_->_tmp5_, _data_->_res_, &_data_->_tmp6_, &_data_->_tmp7_, &_data_->_inner_error0_);
#line 112 "../src/ScreenshotBackend.vala"
	_data_->success = _data_->_tmp6_;
#line 112 "../src/ScreenshotBackend.vala"
	_g_free0 (_data_->filename_used);
#line 112 "../src/ScreenshotBackend.vala"
	_data_->filename_used = _data_->_tmp7_;
#line 112 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 112 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 112 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 112 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 112 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1310 "ScreenshotBackend.c"
	}
#line 104 "../src/ScreenshotBackend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 104 "../src/ScreenshotBackend.vala"
	if (_data_->_state_ != 0) {
#line 104 "../src/ScreenshotBackend.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 104 "../src/ScreenshotBackend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1320 "ScreenshotBackend.c"
		}
	}
#line 104 "../src/ScreenshotBackend.vala"
	g_object_unref (_data_->_async_result);
#line 104 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1327 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_get_pixbuf_data_free (gpointer _data)
{
	ScreenshotScreenshotBackendGetPixbufData* _data_;
	_data_ = _data;
#line 23 "../src/ScreenshotBackend.vala"
	__vala_GdkRectangle_free0 (_data_->rect);
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->result);
#line 23 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->self);
#line 23 "../src/ScreenshotBackend.vala"
	g_slice_free (ScreenshotScreenshotBackendGetPixbufData, _data_);
#line 1343 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_get_pixbuf (ScreenshotScreenshotBackend* self,
                                          GdkRectangle* rect,
                                          ScreenshotCaptureType type,
                                          gboolean include_pointer,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	ScreenshotScreenshotBackendGetPixbufData* _data_;
	ScreenshotScreenshotBackend* _tmp0_;
	GdkRectangle* _tmp1_;
#line 23 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_slice_new0 (ScreenshotScreenshotBackendGetPixbufData);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 23 "../src/ScreenshotBackend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_screenshot_backend_get_pixbuf_data_free);
#line 23 "../src/ScreenshotBackend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->self = _tmp0_;
#line 23 "../src/ScreenshotBackend.vala"
	_tmp1_ = __vala_GdkRectangle_copy0 (rect);
#line 23 "../src/ScreenshotBackend.vala"
	__vala_GdkRectangle_free0 (_data_->rect);
#line 23 "../src/ScreenshotBackend.vala"
	_data_->rect = _tmp1_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->type = type;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->include_pointer = include_pointer;
#line 23 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_get_pixbuf_co (_data_);
#line 1381 "ScreenshotBackend.c"
}

static GdkPixbuf*
screenshot_screenshot_backend_get_pixbuf_finish (ScreenshotScreenshotBackend* self,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	GdkPixbuf* result;
	ScreenshotScreenshotBackendGetPixbufData* _data_;
#line 23 "../src/ScreenshotBackend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 23 "../src/ScreenshotBackend.vala"
	if (NULL == _data_) {
#line 23 "../src/ScreenshotBackend.vala"
		return NULL;
#line 1397 "ScreenshotBackend.c"
	}
#line 23 "../src/ScreenshotBackend.vala"
	result = _data_->result;
#line 23 "../src/ScreenshotBackend.vala"
	_data_->result = NULL;
#line 23 "../src/ScreenshotBackend.vala"
	return result;
#line 1405 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_get_pixbuf_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	ScreenshotScreenshotBackendGetPixbufData* _data_;
#line 123 "../src/ScreenshotBackend.vala"
	_data_ = _user_data_;
#line 123 "../src/ScreenshotBackend.vala"
	_data_->_source_object_ = source_object;
#line 123 "../src/ScreenshotBackend.vala"
	_data_->_res_ = _res_;
#line 123 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_get_pixbuf_co (_data_);
#line 1422 "ScreenshotBackend.c"
}

static gboolean
screenshot_screenshot_backend_get_pixbuf_co (ScreenshotScreenshotBackendGetPixbufData* _data_)
{
#line 116 "../src/ScreenshotBackend.vala"
	switch (_data_->_state_) {
#line 116 "../src/ScreenshotBackend.vala"
		case 0:
#line 1432 "ScreenshotBackend.c"
		goto _state_0;
#line 116 "../src/ScreenshotBackend.vala"
		case 1:
#line 1436 "ScreenshotBackend.c"
		goto _state_1;
#line 116 "../src/ScreenshotBackend.vala"
		case 2:
#line 1440 "ScreenshotBackend.c"
		goto _state_2;
#line 116 "../src/ScreenshotBackend.vala"
		case 3:
#line 1444 "ScreenshotBackend.c"
		goto _state_3;
#line 116 "../src/ScreenshotBackend.vala"
		case 4:
#line 1448 "ScreenshotBackend.c"
		goto _state_4;
#line 116 "../src/ScreenshotBackend.vala"
		case 5:
#line 1452 "ScreenshotBackend.c"
		goto _state_5;
#line 116 "../src/ScreenshotBackend.vala"
		case 6:
#line 1456 "ScreenshotBackend.c"
		goto _state_6;
#line 116 "../src/ScreenshotBackend.vala"
		case 7:
#line 1460 "ScreenshotBackend.c"
		goto _state_7;
		default:
#line 116 "../src/ScreenshotBackend.vala"
		g_assert_not_reached ();
#line 1465 "ScreenshotBackend.c"
	}
	_state_0:
#line 117 "../src/ScreenshotBackend.vala"
	_data_->success = FALSE;
#line 118 "../src/ScreenshotBackend.vala"
	_data_->_tmp0_ = g_strdup ("");
#line 118 "../src/ScreenshotBackend.vala"
	_data_->filename_used = _data_->_tmp0_;
#line 119 "../src/ScreenshotBackend.vala"
	_data_->_tmp1_ = screenshot_screenshot_backend_get_tmp_filename (_data_->self);
#line 119 "../src/ScreenshotBackend.vala"
	_data_->tmp_filename = _data_->_tmp1_;
#line 121 "../src/ScreenshotBackend.vala"
	switch (_data_->type) {
#line 121 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_CAPTURE_TYPE_SCREEN:
#line 1482 "ScreenshotBackend.c"
		{
#line 123 "../src/ScreenshotBackend.vala"
			_data_->_tmp2_ = _data_->self->priv->proxy;
#line 123 "../src/ScreenshotBackend.vala"
			_data_->_tmp3_ = _data_->tmp_filename;
#line 123 "../src/ScreenshotBackend.vala"
			_data_->_tmp4_ = FALSE;
#line 123 "../src/ScreenshotBackend.vala"
			_data_->_tmp5_ = NULL;
#line 123 "../src/ScreenshotBackend.vala"
			_data_->_state_ = 1;
#line 123 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_proxy_screenshot (_data_->_tmp2_, _data_->include_pointer, FALSE, _data_->_tmp3_, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 123 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 1498 "ScreenshotBackend.c"
			_state_1:
#line 123 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_proxy_screenshot_finish (_data_->_tmp2_, _data_->_res_, &_data_->_tmp4_, &_data_->_tmp5_, &_data_->_inner_error0_);
#line 123 "../src/ScreenshotBackend.vala"
			_data_->success = _data_->_tmp4_;
#line 123 "../src/ScreenshotBackend.vala"
			_g_free0 (_data_->filename_used);
#line 123 "../src/ScreenshotBackend.vala"
			_data_->filename_used = _data_->_tmp5_;
#line 123 "../src/ScreenshotBackend.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 123 "../src/ScreenshotBackend.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 123 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->tmp_filename);
#line 123 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->filename_used);
#line 123 "../src/ScreenshotBackend.vala"
				g_object_unref (_data_->_async_result);
#line 123 "../src/ScreenshotBackend.vala"
				return FALSE;
#line 1520 "ScreenshotBackend.c"
			}
#line 125 "../src/ScreenshotBackend.vala"
			break;
#line 1524 "ScreenshotBackend.c"
		}
#line 121 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW:
#line 1528 "ScreenshotBackend.c"
		{
#line 127 "../src/ScreenshotBackend.vala"
			_data_->_tmp6_ = _data_->self->priv->proxy;
#line 127 "../src/ScreenshotBackend.vala"
			_data_->_tmp7_ = _data_->tmp_filename;
#line 127 "../src/ScreenshotBackend.vala"
			_data_->_tmp8_ = FALSE;
#line 127 "../src/ScreenshotBackend.vala"
			_data_->_tmp9_ = NULL;
#line 127 "../src/ScreenshotBackend.vala"
			_data_->_state_ = 2;
#line 127 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_proxy_screenshot_window (_data_->_tmp6_, TRUE, _data_->include_pointer, FALSE, _data_->_tmp7_, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 127 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 1544 "ScreenshotBackend.c"
			_state_2:
#line 127 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_proxy_screenshot_window_finish (_data_->_tmp6_, _data_->_res_, &_data_->_tmp8_, &_data_->_tmp9_, &_data_->_inner_error0_);
#line 127 "../src/ScreenshotBackend.vala"
			_data_->success = _data_->_tmp8_;
#line 127 "../src/ScreenshotBackend.vala"
			_g_free0 (_data_->filename_used);
#line 127 "../src/ScreenshotBackend.vala"
			_data_->filename_used = _data_->_tmp9_;
#line 127 "../src/ScreenshotBackend.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 127 "../src/ScreenshotBackend.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 127 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->tmp_filename);
#line 127 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->filename_used);
#line 127 "../src/ScreenshotBackend.vala"
				g_object_unref (_data_->_async_result);
#line 127 "../src/ScreenshotBackend.vala"
				return FALSE;
#line 1566 "ScreenshotBackend.c"
			}
#line 130 "../src/ScreenshotBackend.vala"
			break;
#line 1570 "ScreenshotBackend.c"
		}
#line 121 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_CAPTURE_TYPE_AREA:
#line 1574 "ScreenshotBackend.c"
		{
#line 132 "../src/ScreenshotBackend.vala"
			if (_data_->rect == NULL) {
#line 133 "../src/ScreenshotBackend.vala"
				_data_->result = NULL;
#line 133 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->tmp_filename);
#line 133 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->filename_used);
#line 133 "../src/ScreenshotBackend.vala"
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 133 "../src/ScreenshotBackend.vala"
				if (_data_->_state_ != 0) {
#line 133 "../src/ScreenshotBackend.vala"
					while (!g_task_get_completed (_data_->_async_result)) {
#line 133 "../src/ScreenshotBackend.vala"
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1592 "ScreenshotBackend.c"
					}
				}
#line 133 "../src/ScreenshotBackend.vala"
				g_object_unref (_data_->_async_result);
#line 133 "../src/ScreenshotBackend.vala"
				return FALSE;
#line 1599 "ScreenshotBackend.c"
			}
#line 136 "../src/ScreenshotBackend.vala"
			_data_->_tmp10_ = _data_->tmp_filename;
#line 136 "../src/ScreenshotBackend.vala"
			_data_->_tmp11_ = FALSE;
#line 136 "../src/ScreenshotBackend.vala"
			_data_->_tmp12_ = NULL;
#line 136 "../src/ScreenshotBackend.vala"
			_data_->_state_ = 3;
#line 136 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_backend_screenshot_area (_data_->self, (*_data_->rect).x, (*_data_->rect).y, (*_data_->rect).width, (*_data_->rect).height, _data_->include_pointer, FALSE, _data_->_tmp10_, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 136 "../src/ScreenshotBackend.vala"
			return FALSE;
#line 1613 "ScreenshotBackend.c"
			_state_3:
#line 136 "../src/ScreenshotBackend.vala"
			screenshot_screenshot_backend_screenshot_area_finish (_data_->self, _data_->_res_, &_data_->_tmp11_, &_data_->_tmp12_, &_data_->_inner_error0_);
#line 136 "../src/ScreenshotBackend.vala"
			_data_->success = _data_->_tmp11_;
#line 136 "../src/ScreenshotBackend.vala"
			_g_free0 (_data_->filename_used);
#line 136 "../src/ScreenshotBackend.vala"
			_data_->filename_used = _data_->_tmp12_;
#line 136 "../src/ScreenshotBackend.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 136 "../src/ScreenshotBackend.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 136 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->tmp_filename);
#line 136 "../src/ScreenshotBackend.vala"
				_g_free0 (_data_->filename_used);
#line 136 "../src/ScreenshotBackend.vala"
				g_object_unref (_data_->_async_result);
#line 136 "../src/ScreenshotBackend.vala"
				return FALSE;
#line 1635 "ScreenshotBackend.c"
			}
#line 140 "../src/ScreenshotBackend.vala"
			break;
#line 1639 "ScreenshotBackend.c"
		}
		default:
#line 121 "../src/ScreenshotBackend.vala"
		break;
#line 1644 "ScreenshotBackend.c"
	}
#line 143 "../src/ScreenshotBackend.vala"
	if (!_data_->success) {
#line 144 "../src/ScreenshotBackend.vala"
		_data_->result = NULL;
#line 144 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->tmp_filename);
#line 144 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 144 "../src/ScreenshotBackend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 144 "../src/ScreenshotBackend.vala"
		if (_data_->_state_ != 0) {
#line 144 "../src/ScreenshotBackend.vala"
			while (!g_task_get_completed (_data_->_async_result)) {
#line 144 "../src/ScreenshotBackend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1662 "ScreenshotBackend.c"
			}
		}
#line 144 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 144 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1669 "ScreenshotBackend.c"
	}
#line 147 "../src/ScreenshotBackend.vala"
	_data_->_tmp13_ = _data_->filename_used;
#line 147 "../src/ScreenshotBackend.vala"
	_data_->_tmp14_ = g_file_new_for_path (_data_->_tmp13_);
#line 147 "../src/ScreenshotBackend.vala"
	_data_->file = _data_->_tmp14_;
#line 148 "../src/ScreenshotBackend.vala"
	_data_->_tmp15_ = _data_->file;
#line 148 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 4;
#line 148 "../src/ScreenshotBackend.vala"
	g_file_read_async (_data_->_tmp15_, G_PRIORITY_DEFAULT, NULL, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 148 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1685 "ScreenshotBackend.c"
	_state_4:
#line 148 "../src/ScreenshotBackend.vala"
	_data_->_tmp16_ = g_file_read_finish (_data_->_tmp15_, _data_->_res_, &_data_->_inner_error0_);
#line 148 "../src/ScreenshotBackend.vala"
	_data_->stream = _data_->_tmp16_;
#line 148 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 148 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 148 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->file);
#line 148 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->tmp_filename);
#line 148 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 148 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 148 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1705 "ScreenshotBackend.c"
	}
#line 149 "../src/ScreenshotBackend.vala"
	_data_->_tmp17_ = _data_->stream;
#line 149 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 5;
#line 149 "../src/ScreenshotBackend.vala"
	gdk_pixbuf_new_from_stream_async ((GInputStream*) _data_->_tmp17_, NULL, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 149 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1715 "ScreenshotBackend.c"
	_state_5:
#line 149 "../src/ScreenshotBackend.vala"
	_data_->_tmp18_ = (GdkPixbuf*) gdk_pixbuf_new_from_stream_finish (_data_->_res_, &_data_->_inner_error0_);
#line 149 "../src/ScreenshotBackend.vala"
	_data_->pixbuf = _data_->_tmp18_;
#line 149 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 149 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 149 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->stream);
#line 149 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->file);
#line 149 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->tmp_filename);
#line 149 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 149 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 149 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1737 "ScreenshotBackend.c"
	}
#line 150 "../src/ScreenshotBackend.vala"
	_data_->_tmp19_ = _data_->stream;
#line 150 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 6;
#line 150 "../src/ScreenshotBackend.vala"
	g_input_stream_close_async ((GInputStream*) _data_->_tmp19_, G_PRIORITY_DEFAULT, NULL, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 150 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1747 "ScreenshotBackend.c"
	_state_6:
#line 150 "../src/ScreenshotBackend.vala"
	g_input_stream_close_finish ((GInputStream*) _data_->_tmp19_, _data_->_res_, &_data_->_inner_error0_);
#line 150 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 150 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 150 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 150 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->stream);
#line 150 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->file);
#line 150 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->tmp_filename);
#line 150 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 150 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 150 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1769 "ScreenshotBackend.c"
	}
#line 151 "../src/ScreenshotBackend.vala"
	_data_->_tmp20_ = _data_->file;
#line 151 "../src/ScreenshotBackend.vala"
	_data_->_state_ = 7;
#line 151 "../src/ScreenshotBackend.vala"
	g_file_delete_async (_data_->_tmp20_, G_PRIORITY_DEFAULT, NULL, screenshot_screenshot_backend_get_pixbuf_ready, _data_);
#line 151 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1779 "ScreenshotBackend.c"
	_state_7:
#line 151 "../src/ScreenshotBackend.vala"
	g_file_delete_finish (_data_->_tmp20_, _data_->_res_, &_data_->_inner_error0_);
#line 151 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 151 "../src/ScreenshotBackend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 151 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 151 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->stream);
#line 151 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_data_->file);
#line 151 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->tmp_filename);
#line 151 "../src/ScreenshotBackend.vala"
		_g_free0 (_data_->filename_used);
#line 151 "../src/ScreenshotBackend.vala"
		g_object_unref (_data_->_async_result);
#line 151 "../src/ScreenshotBackend.vala"
		return FALSE;
#line 1801 "ScreenshotBackend.c"
	}
#line 153 "../src/ScreenshotBackend.vala"
	_data_->result = _data_->pixbuf;
#line 153 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->stream);
#line 153 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (_data_->file);
#line 153 "../src/ScreenshotBackend.vala"
	_g_free0 (_data_->tmp_filename);
#line 153 "../src/ScreenshotBackend.vala"
	_g_free0 (_data_->filename_used);
#line 153 "../src/ScreenshotBackend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 153 "../src/ScreenshotBackend.vala"
	if (_data_->_state_ != 0) {
#line 153 "../src/ScreenshotBackend.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 153 "../src/ScreenshotBackend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1821 "ScreenshotBackend.c"
		}
	}
#line 153 "../src/ScreenshotBackend.vala"
	g_object_unref (_data_->_async_result);
#line 153 "../src/ScreenshotBackend.vala"
	return FALSE;
#line 1828 "ScreenshotBackend.c"
}

static gchar*
screenshot_screenshot_backend_get_tmp_filename (ScreenshotScreenshotBackend* self)
{
	gchar* dir = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* name = NULL;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* result;
#line 156 "../src/ScreenshotBackend.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 157 "../src/ScreenshotBackend.vala"
	_tmp0_ = g_get_user_cache_dir ();
#line 157 "../src/ScreenshotBackend.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 157 "../src/ScreenshotBackend.vala"
	dir = _tmp1_;
#line 158 "../src/ScreenshotBackend.vala"
	_tmp2_ = g_strdup_printf ("io.elementary.screenshot-%lu.png", (gulong) g_random_int ());
#line 158 "../src/ScreenshotBackend.vala"
	name = _tmp2_;
#line 159 "../src/ScreenshotBackend.vala"
	_tmp3_ = g_build_filename (dir, name, NULL);
#line 159 "../src/ScreenshotBackend.vala"
	result = _tmp3_;
#line 159 "../src/ScreenshotBackend.vala"
	_g_free0 (name);
#line 159 "../src/ScreenshotBackend.vala"
	_g_free0 (dir);
#line 159 "../src/ScreenshotBackend.vala"
	return result;
#line 1863 "ScreenshotBackend.c"
}

ScreenshotScreenshotBackend*
screenshot_screenshot_backend_construct (GType object_type)
{
	ScreenshotScreenshotBackend * self = NULL;
#line 23 "../src/ScreenshotBackend.vala"
	self = (ScreenshotScreenshotBackend*) g_object_new (object_type, NULL);
#line 23 "../src/ScreenshotBackend.vala"
	return self;
#line 1874 "ScreenshotBackend.c"
}

ScreenshotScreenshotBackend*
screenshot_screenshot_backend_new (void)
{
#line 23 "../src/ScreenshotBackend.vala"
	return screenshot_screenshot_backend_construct (SCREENSHOT_TYPE_SCREENSHOT_BACKEND);
#line 1882 "ScreenshotBackend.c"
}

gboolean
screenshot_screenshot_backend_get_can_conceal_text (ScreenshotScreenshotBackend* self)
{
	gboolean result;
#line 26 "../src/ScreenshotBackend.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 26 "../src/ScreenshotBackend.vala"
	result = self->priv->_can_conceal_text;
#line 26 "../src/ScreenshotBackend.vala"
	return result;
#line 1895 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_set_can_conceal_text (ScreenshotScreenshotBackend* self,
                                                    gboolean value)
{
	gboolean old_value;
#line 26 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 26 "../src/ScreenshotBackend.vala"
	old_value = screenshot_screenshot_backend_get_can_conceal_text (self);
#line 26 "../src/ScreenshotBackend.vala"
	if (old_value != value) {
#line 26 "../src/ScreenshotBackend.vala"
		self->priv->_can_conceal_text = value;
#line 26 "../src/ScreenshotBackend.vala"
		g_object_notify_by_pspec ((GObject *) self, screenshot_screenshot_backend_properties[SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY]);
#line 1913 "ScreenshotBackend.c"
	}
}

gboolean
screenshot_screenshot_backend_get_can_screenshot_area_with_cursor (ScreenshotScreenshotBackend* self)
{
	gboolean result;
#line 27 "../src/ScreenshotBackend.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 27 "../src/ScreenshotBackend.vala"
	result = self->priv->_can_screenshot_area_with_cursor;
#line 27 "../src/ScreenshotBackend.vala"
	return result;
#line 1927 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_set_can_screenshot_area_with_cursor (ScreenshotScreenshotBackend* self,
                                                                   gboolean value)
{
	gboolean old_value;
#line 27 "../src/ScreenshotBackend.vala"
	g_return_if_fail (self != NULL);
#line 27 "../src/ScreenshotBackend.vala"
	old_value = screenshot_screenshot_backend_get_can_screenshot_area_with_cursor (self);
#line 27 "../src/ScreenshotBackend.vala"
	if (old_value != value) {
#line 27 "../src/ScreenshotBackend.vala"
		self->priv->_can_screenshot_area_with_cursor = value;
#line 27 "../src/ScreenshotBackend.vala"
		g_object_notify_by_pspec ((GObject *) self, screenshot_screenshot_backend_properties[SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY]);
#line 1945 "ScreenshotBackend.c"
	}
}

static GObject *
screenshot_screenshot_backend_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenshotScreenshotBackend * self;
	GError* _inner_error0_ = NULL;
#line 29 "../src/ScreenshotBackend.vala"
	parent_class = G_OBJECT_CLASS (screenshot_screenshot_backend_parent_class);
#line 29 "../src/ScreenshotBackend.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 29 "../src/ScreenshotBackend.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend);
#line 1964 "ScreenshotBackend.c"
	{
		ScreenshotScreenshotProxy* _tmp0_ = NULL;
		ScreenshotScreenshotProxy* _tmp1_;
		ScreenshotScreenshotProxy* _tmp2_;
#line 31 "../src/ScreenshotBackend.vala"
		_tmp1_ = (ScreenshotScreenshotProxy*) g_initable_new (SCREENSHOT_TYPE_SCREENSHOT_PROXY_PROXY, NULL, &_inner_error0_, "g-flags", 0, "g-name", "org.gnome.Shell.Screenshot", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/gnome/Shell/Screenshot", "g-interface-name", "org.gnome.Shell.Screenshot", NULL);
#line 31 "../src/ScreenshotBackend.vala"
		_tmp0_ = (ScreenshotScreenshotProxy*) _tmp1_;
#line 31 "../src/ScreenshotBackend.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1975 "ScreenshotBackend.c"
			goto __catch0_g_error;
		}
#line 31 "../src/ScreenshotBackend.vala"
		_tmp2_ = _tmp0_;
#line 31 "../src/ScreenshotBackend.vala"
		_tmp0_ = NULL;
#line 31 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (self->priv->proxy);
#line 31 "../src/ScreenshotBackend.vala"
		self->priv->proxy = _tmp2_;
#line 35 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_get_capabilities (self, &_inner_error0_);
#line 35 "../src/ScreenshotBackend.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 35 "../src/ScreenshotBackend.vala"
			_g_object_unref0 (_tmp0_);
#line 1992 "ScreenshotBackend.c"
			goto __catch0_g_error;
		}
#line 30 "../src/ScreenshotBackend.vala"
		_g_object_unref0 (_tmp0_);
#line 1997 "ScreenshotBackend.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp3_;
		const gchar* _tmp4_;
#line 30 "../src/ScreenshotBackend.vala"
		e = _inner_error0_;
#line 30 "../src/ScreenshotBackend.vala"
		_inner_error0_ = NULL;
#line 37 "../src/ScreenshotBackend.vala"
		_tmp3_ = e;
#line 37 "../src/ScreenshotBackend.vala"
		_tmp4_ = _tmp3_->message;
#line 37 "../src/ScreenshotBackend.vala"
		g_error ("ScreenshotBackend.vala:37: Couldn't get dbus proxy: %s\n", _tmp4_);
#line 30 "../src/ScreenshotBackend.vala"
		_g_error_free0 (e);
#line 2017 "ScreenshotBackend.c"
	}
	__finally0:
#line 30 "../src/ScreenshotBackend.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 30 "../src/ScreenshotBackend.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 30 "../src/ScreenshotBackend.vala"
		g_clear_error (&_inner_error0_);
#line 2026 "ScreenshotBackend.c"
	}
#line 29 "../src/ScreenshotBackend.vala"
	return obj;
#line 2030 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_class_init (ScreenshotScreenshotBackendClass * klass,
                                          gpointer klass_data)
{
#line 23 "../src/ScreenshotBackend.vala"
	screenshot_screenshot_backend_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/ScreenshotBackend.vala"
	g_type_class_adjust_private_offset (klass, &ScreenshotScreenshotBackend_private_offset);
#line 23 "../src/ScreenshotBackend.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_screenshot_screenshot_backend_get_property;
#line 23 "../src/ScreenshotBackend.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_screenshot_screenshot_backend_set_property;
#line 23 "../src/ScreenshotBackend.vala"
	G_OBJECT_CLASS (klass)->constructor = screenshot_screenshot_backend_constructor;
#line 23 "../src/ScreenshotBackend.vala"
	G_OBJECT_CLASS (klass)->finalize = screenshot_screenshot_backend_finalize;
#line 23 "../src/ScreenshotBackend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY, screenshot_screenshot_backend_properties[SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY] = g_param_spec_boolean ("can-conceal-text", "can-conceal-text", "can-conceal-text", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 23 "../src/ScreenshotBackend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY, screenshot_screenshot_backend_properties[SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY] = g_param_spec_boolean ("can-screenshot-area-with-cursor", "can-screenshot-area-with-cursor", "can-screenshot-area-with-cursor", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2053 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_instance_init (ScreenshotScreenshotBackend * self,
                                             gpointer klass)
{
#line 23 "../src/ScreenshotBackend.vala"
	self->priv = screenshot_screenshot_backend_get_instance_private (self);
#line 2062 "ScreenshotBackend.c"
}

static void
screenshot_screenshot_backend_finalize (GObject * obj)
{
	ScreenshotScreenshotBackend * self;
#line 23 "../src/ScreenshotBackend.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend);
#line 25 "../src/ScreenshotBackend.vala"
	_g_object_unref0 (self->priv->proxy);
#line 23 "../src/ScreenshotBackend.vala"
	G_OBJECT_CLASS (screenshot_screenshot_backend_parent_class)->finalize (obj);
#line 2075 "ScreenshotBackend.c"
}

static GType
screenshot_screenshot_backend_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenshotScreenshotBackendClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screenshot_screenshot_backend_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenshotScreenshotBackend), 0, (GInstanceInitFunc) screenshot_screenshot_backend_instance_init, NULL };
	GType screenshot_screenshot_backend_type_id;
	screenshot_screenshot_backend_type_id = g_type_register_static (G_TYPE_OBJECT, "ScreenshotScreenshotBackend", &g_define_type_info, 0);
	ScreenshotScreenshotBackend_private_offset = g_type_add_instance_private (screenshot_screenshot_backend_type_id, sizeof (ScreenshotScreenshotBackendPrivate));
	return screenshot_screenshot_backend_type_id;
}

GType
screenshot_screenshot_backend_get_type (void)
{
	static volatile gsize screenshot_screenshot_backend_type_id__once = 0;
	if (g_once_init_enter (&screenshot_screenshot_backend_type_id__once)) {
		GType screenshot_screenshot_backend_type_id;
		screenshot_screenshot_backend_type_id = screenshot_screenshot_backend_get_type_once ();
		g_once_init_leave (&screenshot_screenshot_backend_type_id__once, screenshot_screenshot_backend_type_id);
	}
	return screenshot_screenshot_backend_type_id__once;
}

static void
_vala_screenshot_screenshot_backend_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	ScreenshotScreenshotBackend * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend);
#line 23 "../src/ScreenshotBackend.vala"
	switch (property_id) {
#line 23 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY:
#line 23 "../src/ScreenshotBackend.vala"
		g_value_set_boolean (value, screenshot_screenshot_backend_get_can_conceal_text (self));
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 23 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY:
#line 23 "../src/ScreenshotBackend.vala"
		g_value_set_boolean (value, screenshot_screenshot_backend_get_can_screenshot_area_with_cursor (self));
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 2122 "ScreenshotBackend.c"
		default:
#line 23 "../src/ScreenshotBackend.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 2128 "ScreenshotBackend.c"
	}
}

static void
_vala_screenshot_screenshot_backend_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	ScreenshotScreenshotBackend * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend);
#line 23 "../src/ScreenshotBackend.vala"
	switch (property_id) {
#line 23 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_SCREENSHOT_BACKEND_CAN_CONCEAL_TEXT_PROPERTY:
#line 23 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_set_can_conceal_text (self, g_value_get_boolean (value));
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 23 "../src/ScreenshotBackend.vala"
		case SCREENSHOT_SCREENSHOT_BACKEND_CAN_SCREENSHOT_AREA_WITH_CURSOR_PROPERTY:
#line 23 "../src/ScreenshotBackend.vala"
		screenshot_screenshot_backend_set_can_screenshot_area_with_cursor (self, g_value_get_boolean (value));
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 2154 "ScreenshotBackend.c"
		default:
#line 23 "../src/ScreenshotBackend.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/ScreenshotBackend.vala"
		break;
#line 2160 "ScreenshotBackend.c"
	}
}

