/* Application.c generated by valac 0.56.17, the Vala compiler
 * generated from Application.vala, do not modify */

/*
* Copyright 2017-2020 elementary, Inc. (https://elementary.io)
*           2014-2016 Fabio Zaramella <ffabio.96.x@gmail.com>
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License version 3 as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <granite-7.h>
#include <libportal/portal.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>
#include <locale.h>

#define SCREENSHOT_APPLICATION_SAVE_FOLDER _ ("Screenshots")
#define SCREENSHOT_APPLICATION_CAPTURE_AREA N_ ("Capture area")
#define SCREENSHOT_APPLICATION_CAPTURE_STRING N_ ("Capture the whole screen")
#define SCREENSHOT_APPLICATION_CAPTURE_WIN N_ ("Capture active window")
#define SCREENSHOT_APPLICATION_DELAY N_ ("Take screenshot after specified delay")
#define SCREENSHOT_APPLICATION_SECONDS N_ ("Seconds")
#define SCREENSHOT_APPLICATION_INCLUDE_POINTER N_ ("Include the pointer with the screenshot")
#define SCREENSHOT_APPLICATION_REDACT_TEXT N_ ("Redact system text")
#define SCREENSHOT_APPLICATION_CLIPBOARD N_ ("Save screenshot to clipboard")
#define GETTEXT_PACKAGE "io.elementary.screenshot"
#define LOCALEDIR "/app/share/locale"
#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define SCREENSHOT_TYPE_APPLICATION (screenshot_application_get_type ())
#define SCREENSHOT_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_APPLICATION, ScreenshotApplication))
#define SCREENSHOT_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_TYPE_APPLICATION, ScreenshotApplicationClass))
#define SCREENSHOT_IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_APPLICATION))
#define SCREENSHOT_IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_TYPE_APPLICATION))
#define SCREENSHOT_APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_TYPE_APPLICATION, ScreenshotApplicationClass))

typedef struct _ScreenshotApplication ScreenshotApplication;
typedef struct _ScreenshotApplicationClass ScreenshotApplicationClass;
typedef struct _ScreenshotApplicationPrivate ScreenshotApplicationPrivate;
enum  {
	SCREENSHOT_APPLICATION_0_PROPERTY,
	SCREENSHOT_APPLICATION_NUM_PROPERTIES
};
static GParamSpec* screenshot_application_properties[SCREENSHOT_APPLICATION_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block1Data Block1Data;
typedef enum  {
	SCREENSHOT_CAPTURE_TYPE_SCREEN,
	SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW,
	SCREENSHOT_CAPTURE_TYPE_AREA
} ScreenshotCaptureType;

#define SCREENSHOT_TYPE_CAPTURE_TYPE (screenshot_capture_type_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _ScreenshotApplicationTakeScreenshotData ScreenshotApplicationTakeScreenshotData;

#define SCREENSHOT_TYPE_SCREENSHOT_BACKEND (screenshot_screenshot_backend_get_type ())
#define SCREENSHOT_SCREENSHOT_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackend))
#define SCREENSHOT_SCREENSHOT_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackendClass))
#define SCREENSHOT_IS_SCREENSHOT_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND))
#define SCREENSHOT_IS_SCREENSHOT_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_TYPE_SCREENSHOT_BACKEND))
#define SCREENSHOT_SCREENSHOT_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_TYPE_SCREENSHOT_BACKEND, ScreenshotScreenshotBackendClass))

typedef struct _ScreenshotScreenshotBackend ScreenshotScreenshotBackend;
typedef struct _ScreenshotScreenshotBackendClass ScreenshotScreenshotBackendClass;
typedef struct _ScreenshotApplicationTakeScreenshotBackendData ScreenshotApplicationTakeScreenshotBackendData;

#define SCREENSHOT_TYPE_SAVE_DIALOG (screenshot_save_dialog_get_type ())
#define SCREENSHOT_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SCREENSHOT_TYPE_SAVE_DIALOG, ScreenshotSaveDialog))
#define SCREENSHOT_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SCREENSHOT_TYPE_SAVE_DIALOG, ScreenshotSaveDialogClass))
#define SCREENSHOT_IS_SAVE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SCREENSHOT_TYPE_SAVE_DIALOG))
#define SCREENSHOT_IS_SAVE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SCREENSHOT_TYPE_SAVE_DIALOG))
#define SCREENSHOT_SAVE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SCREENSHOT_TYPE_SAVE_DIALOG, ScreenshotSaveDialogClass))

typedef struct _ScreenshotSaveDialog ScreenshotSaveDialog;
typedef struct _ScreenshotSaveDialogClass ScreenshotSaveDialogClass;
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))

struct _ScreenshotApplication {
	GtkApplication parent_instance;
	ScreenshotApplicationPrivate * priv;
};

struct _ScreenshotApplicationClass {
	GtkApplicationClass parent_class;
};

struct _ScreenshotApplicationPrivate {
	GSettings* settings;
};

struct _Block1Data {
	int _ref_count_;
	ScreenshotApplication* self;
	GraniteSettings* granite_settings;
	GtkSettings* gtk_settings;
};

struct _ScreenshotApplicationTakeScreenshotData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotApplication* self;
	XdpPortal* portal;
	XdpPortal* _tmp0_;
	gchar* file_uri;
	XdpPortal* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	GdkPixbuf* pixbuf;
	GdkPixbuf* _tmp6_;
	GdkPixbuf* _tmp7_;
	GError* e;
	GError* _tmp8_;
	const gchar* _tmp9_;
	GError* _inner_error1_;
	GError* _inner_error0_;
};

struct _ScreenshotApplicationTakeScreenshotBackendData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	ScreenshotApplication* self;
	ScreenshotCaptureType capture_type;
	ScreenshotScreenshotBackend* backend;
	ScreenshotScreenshotBackend* _tmp0_;
	GdkPixbuf* pixbuf;
	ScreenshotScreenshotBackend* _tmp1_;
	GdkPixbuf* _tmp2_;
	GdkPixbuf* _tmp3_;
	GdkPixbuf* _tmp4_;
	GError* e;
	GError* _tmp5_;
	const gchar* _tmp6_;
	GError* _inner_error1_;
	GError* _inner_error0_;
};

static gint ScreenshotApplication_private_offset;
static gpointer screenshot_application_parent_class = NULL;
static gboolean screenshot_application_win;
static gboolean screenshot_application_area;
static gboolean screenshot_application_screen;
static gint screenshot_application_delay;
static gboolean screenshot_application_grab_pointer;
static gboolean screenshot_application_redact;
static gboolean screenshot_application_clipboard;
static gboolean screenshot_application_area = FALSE;
static gboolean screenshot_application_clipboard = FALSE;
static gboolean screenshot_application_grab_pointer = FALSE;
static gboolean screenshot_application_redact = FALSE;
static gboolean screenshot_application_screen = FALSE;
static gboolean screenshot_application_win = FALSE;
static gint screenshot_application_delay = 1;

VALA_EXTERN GType screenshot_application_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotApplication, g_object_unref)
VALA_EXTERN ScreenshotApplication* screenshot_application_new (void);
VALA_EXTERN ScreenshotApplication* screenshot_application_construct (GType object_type);
static void screenshot_application_real_startup (GApplication* base);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void __lambda4_ (Block1Data* _data1_);
static void ___lambda4__g_object_notify (GObject* _sender,
                                  GParamSpec* pspec,
                                  gpointer self);
static void __lambda5_ (ScreenshotApplication* self);
static void ___lambda5__g_simple_action_activate (GSimpleAction* _sender,
                                           GVariant* parameter,
                                           gpointer self);
static void screenshot_application_real_activate (GApplication* base);
static void screenshot_application_take_screenshot (ScreenshotApplication* self,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
static void screenshot_application_take_screenshot_finish (ScreenshotApplication* self,
                                                    GAsyncResult* _res_);
VALA_EXTERN GType screenshot_capture_type_get_type (void) G_GNUC_CONST ;
static void screenshot_application_take_screenshot_backend (ScreenshotApplication* self,
                                                     ScreenshotCaptureType capture_type,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_);
static void screenshot_application_take_screenshot_backend_finish (ScreenshotApplication* self,
                                                            GAsyncResult* _res_);
static void screenshot_application_take_screenshot_data_free (gpointer _data);
static gboolean screenshot_application_take_screenshot_co (ScreenshotApplicationTakeScreenshotData* _data_);
static void screenshot_application_take_screenshot_ready (GObject* source_object,
                                                   GAsyncResult* _res_,
                                                   gpointer _user_data_);
static void screenshot_application_show_save_dialog (ScreenshotApplication* self,
                                              GdkPixbuf* pixbuf);
static void screenshot_application_take_screenshot_backend_data_free (gpointer _data);
static gboolean screenshot_application_take_screenshot_backend_co (ScreenshotApplicationTakeScreenshotBackendData* _data_);
VALA_EXTERN GType screenshot_screenshot_backend_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotScreenshotBackend, g_object_unref)
VALA_EXTERN ScreenshotScreenshotBackend* screenshot_screenshot_backend_new (void);
VALA_EXTERN ScreenshotScreenshotBackend* screenshot_screenshot_backend_construct (GType object_type);
VALA_EXTERN void screenshot_screenshot_backend_capture (ScreenshotScreenshotBackend* self,
                                            ScreenshotCaptureType type,
                                            gint delay,
                                            gboolean include_pointer,
                                            gboolean redact,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
VALA_EXTERN GdkPixbuf* screenshot_screenshot_backend_capture_finish (ScreenshotScreenshotBackend* self,
                                                         GAsyncResult* _res_,
                                                         GError** error);
static void screenshot_application_take_screenshot_backend_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_);
static void screenshot_application_show_error_dialog (ScreenshotApplication* self,
                                               const gchar* error_message);
VALA_EXTERN GType screenshot_save_dialog_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ScreenshotSaveDialog, g_object_unref)
VALA_EXTERN ScreenshotSaveDialog* screenshot_save_dialog_new (GdkPixbuf* pixbuf,
                                                  GSettings* settings);
VALA_EXTERN ScreenshotSaveDialog* screenshot_save_dialog_construct (GType object_type,
                                                        GdkPixbuf* pixbuf,
                                                        GSettings* settings);
static void __lambda14_ (ScreenshotApplication* self,
                  ScreenshotSaveDialog* dialog,
                  gboolean response,
                  const gchar* folder_dir,
                  const gchar* output_name,
                  const gchar* format);
static void screenshot_application_save_file (ScreenshotApplication* self,
                                       GdkPixbuf* pixbuf,
                                       const gchar* file_name,
                                       const gchar* format,
                                       gchar* folder_dir,
                                       GError** error);
VALA_EXTERN GdkPixbuf* screenshot_save_dialog_get_pixbuf (ScreenshotSaveDialog* self);
static void ___lambda14__screenshot_save_dialog_save_response (ScreenshotSaveDialog* _sender,
                                                        gboolean response,
                                                        const gchar* folder_dir,
                                                        const gchar* output_name,
                                                        const gchar* format,
                                                        gpointer self);
VALA_EXTERN void screenshot_application_create_dir_if_missing (const gchar* path);
static void _gtk_window_destroy_gtk_dialog_response (GtkDialog* _sender,
                                              gint response_id,
                                              gpointer self);
static gint screenshot_application_main (gchar** args,
                                  gint args_length1);
static GObject * screenshot_application_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties);
static void screenshot_application_finalize (GObject * obj);
static GType screenshot_application_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static const GOptionEntry SCREENSHOT_APPLICATION_OPTION_ENTRIES[8] = {{"window", 'w', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_win, SCREENSHOT_APPLICATION_CAPTURE_WIN, NULL}, {"area", 'r', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_area, SCREENSHOT_APPLICATION_CAPTURE_AREA, NULL}, {"screen", 's', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_screen, SCREENSHOT_APPLICATION_CAPTURE_STRING, NULL}, {"delay", 'd', (gint) 0, G_OPTION_ARG_INT, &screenshot_application_delay, SCREENSHOT_APPLICATION_DELAY, SCREENSHOT_APPLICATION_SECONDS}, {"grab-pointer", 'p', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_grab_pointer, SCREENSHOT_APPLICATION_INCLUDE_POINTER, NULL}, {"redact", 'e', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_redact, SCREENSHOT_APPLICATION_REDACT_TEXT, NULL}, {"clipboard", 'c', (gint) 0, G_OPTION_ARG_NONE, &screenshot_application_clipboard, SCREENSHOT_APPLICATION_CLIPBOARD, NULL}, {NULL}};

static inline gpointer
screenshot_application_get_instance_private (ScreenshotApplication* self)
{
	return G_STRUCT_MEMBER_P (self, ScreenshotApplication_private_offset);
}

ScreenshotApplication*
screenshot_application_construct (GType object_type)
{
	ScreenshotApplication * self = NULL;
#line 54 "../src/Application.vala"
	self = (ScreenshotApplication*) g_object_new (object_type, "application-id", "io.elementary.screenshot", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 53 "../src/Application.vala"
	return self;
#line 316 "Application.c"
}

ScreenshotApplication*
screenshot_application_new (void)
{
#line 53 "../src/Application.vala"
	return screenshot_application_construct (SCREENSHOT_TYPE_APPLICATION);
#line 324 "Application.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 69 "../src/Application.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 69 "../src/Application.vala"
	return _data1_;
#line 334 "Application.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 69 "../src/Application.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 344 "Application.c"
		ScreenshotApplication* self;
#line 69 "../src/Application.vala"
		self = _data1_->self;
#line 69 "../src/Application.vala"
		_g_object_unref0 (_data1_->gtk_settings);
#line 69 "../src/Application.vala"
		_g_object_unref0 (_data1_->granite_settings);
#line 69 "../src/Application.vala"
		_g_object_unref0 (self);
#line 69 "../src/Application.vala"
		g_slice_free (Block1Data, _data1_);
#line 356 "Application.c"
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 74 "../src/Application.vala"
	return self ? g_object_ref (self) : NULL;
#line 365 "Application.c"
}

static void
__lambda4_ (Block1Data* _data1_)
{
	ScreenshotApplication* self;
	GraniteSettingsColorScheme _tmp0_;
	GraniteSettingsColorScheme _tmp1_;
#line 79 "../src/Application.vala"
	self = _data1_->self;
#line 80 "../src/Application.vala"
	_tmp0_ = granite_settings_get_prefers_color_scheme (_data1_->granite_settings);
#line 80 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 80 "../src/Application.vala"
	g_object_set (_data1_->gtk_settings, "gtk-application-prefer-dark-theme", _tmp1_ == GRANITE_SETTINGS_COLOR_SCHEME_DARK, NULL);
#line 382 "Application.c"
}

static void
___lambda4__g_object_notify (GObject* _sender,
                             GParamSpec* pspec,
                             gpointer self)
{
#line 79 "../src/Application.vala"
	__lambda4_ (self);
#line 392 "Application.c"
}

static void
__lambda5_ (ScreenshotApplication* self)
{
#line 85 "../src/Application.vala"
	g_application_quit ((GApplication*) self);
#line 400 "Application.c"
}

static void
___lambda5__g_simple_action_activate (GSimpleAction* _sender,
                                      GVariant* parameter,
                                      gpointer self)
{
#line 84 "../src/Application.vala"
	__lambda5_ ((ScreenshotApplication*) self);
#line 410 "Application.c"
}

static void
screenshot_application_real_startup (GApplication* base)
{
	ScreenshotApplication * self;
	Block1Data* _data1_;
	GraniteSettings* _tmp0_;
	GraniteSettings* _tmp1_;
	GtkSettings* _tmp2_;
	GtkSettings* _tmp3_;
	GraniteSettingsColorScheme _tmp4_;
	GraniteSettingsColorScheme _tmp5_;
	GSimpleAction* quit_action = NULL;
	GSimpleAction* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar** _tmp9_;
	gchar** _tmp10_;
	gint _tmp10__length1;
#line 69 "../src/Application.vala"
	self = (ScreenshotApplication*) base;
#line 69 "../src/Application.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 69 "../src/Application.vala"
	_data1_->_ref_count_ = 1;
#line 69 "../src/Application.vala"
	_data1_->self = g_object_ref (self);
#line 70 "../src/Application.vala"
	G_APPLICATION_CLASS (screenshot_application_parent_class)->startup ((GApplication*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_application_get_type (), GtkApplication));
#line 72 "../src/Application.vala"
	granite_init ();
#line 74 "../src/Application.vala"
	_tmp0_ = granite_settings_get_default ();
#line 74 "../src/Application.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 74 "../src/Application.vala"
	_data1_->granite_settings = _tmp1_;
#line 75 "../src/Application.vala"
	_tmp2_ = gtk_settings_get_default ();
#line 75 "../src/Application.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 75 "../src/Application.vala"
	_data1_->gtk_settings = _tmp3_;
#line 77 "../src/Application.vala"
	_tmp4_ = granite_settings_get_prefers_color_scheme (_data1_->granite_settings);
#line 77 "../src/Application.vala"
	_tmp5_ = _tmp4_;
#line 77 "../src/Application.vala"
	g_object_set (_data1_->gtk_settings, "gtk-application-prefer-dark-theme", _tmp5_ == GRANITE_SETTINGS_COLOR_SCHEME_DARK, NULL);
#line 79 "../src/Application.vala"
	g_signal_connect_data ((GObject*) _data1_->granite_settings, "notify::prefers-color-scheme", (GCallback) ___lambda4__g_object_notify, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 83 "../src/Application.vala"
	_tmp6_ = g_simple_action_new ("quit", NULL);
#line 83 "../src/Application.vala"
	quit_action = _tmp6_;
#line 84 "../src/Application.vala"
	g_signal_connect_object (quit_action, "activate", (GCallback) ___lambda5__g_simple_action_activate, self, 0);
#line 88 "../src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) quit_action);
#line 89 "../src/Application.vala"
	_tmp7_ = g_strdup ("<Control>q");
#line 89 "../src/Application.vala"
	_tmp8_ = g_strdup ("Escape");
#line 89 "../src/Application.vala"
	_tmp9_ = g_new0 (gchar*, 2 + 1);
#line 89 "../src/Application.vala"
	_tmp9_[0] = _tmp7_;
#line 89 "../src/Application.vala"
	_tmp9_[1] = _tmp8_;
#line 89 "../src/Application.vala"
	_tmp10_ = _tmp9_;
#line 89 "../src/Application.vala"
	_tmp10__length1 = 2;
#line 89 "../src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.quit", _tmp10_);
#line 89 "../src/Application.vala"
	_tmp10_ = (_vala_array_free (_tmp10_, _tmp10__length1, (GDestroyNotify) g_free), NULL);
#line 69 "../src/Application.vala"
	_g_object_unref0 (quit_action);
#line 69 "../src/Application.vala"
	block1_data_unref (_data1_);
#line 69 "../src/Application.vala"
	_data1_ = NULL;
#line 495 "Application.c"
}

static void
screenshot_application_real_activate (GApplication* base)
{
	ScreenshotApplication * self;
	gint action = 0;
#line 92 "../src/Application.vala"
	self = (ScreenshotApplication*) base;
#line 93 "../src/Application.vala"
	action = 0;
#line 94 "../src/Application.vala"
	if (screenshot_application_screen) {
#line 94 "../src/Application.vala"
		action = 1;
#line 511 "Application.c"
	}
#line 95 "../src/Application.vala"
	if (screenshot_application_win) {
#line 95 "../src/Application.vala"
		action = 2;
#line 517 "Application.c"
	}
#line 96 "../src/Application.vala"
	if (screenshot_application_area) {
#line 96 "../src/Application.vala"
		action = 3;
#line 523 "Application.c"
	}
#line 98 "../src/Application.vala"
	if (action == 0) {
#line 99 "../src/Application.vala"
		screenshot_application_take_screenshot (self, NULL, NULL);
#line 529 "Application.c"
	} else {
#line 101 "../src/Application.vala"
		screenshot_application_take_screenshot_backend (self, action - 1, NULL, NULL);
#line 533 "Application.c"
	}
}

static void
screenshot_application_take_screenshot_data_free (gpointer _data)
{
	ScreenshotApplicationTakeScreenshotData* _data_;
	_data_ = _data;
#line 20 "../src/Application.vala"
	_g_object_unref0 (_data_->self);
#line 20 "../src/Application.vala"
	g_slice_free (ScreenshotApplicationTakeScreenshotData, _data_);
#line 546 "Application.c"
}

static void
screenshot_application_take_screenshot (ScreenshotApplication* self,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	ScreenshotApplicationTakeScreenshotData* _data_;
	ScreenshotApplication* _tmp0_;
#line 20 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 20 "../src/Application.vala"
	_data_ = g_slice_new0 (ScreenshotApplicationTakeScreenshotData);
#line 20 "../src/Application.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 20 "../src/Application.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_application_take_screenshot_data_free);
#line 20 "../src/Application.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 20 "../src/Application.vala"
	_data_->self = _tmp0_;
#line 20 "../src/Application.vala"
	screenshot_application_take_screenshot_co (_data_);
#line 570 "Application.c"
}

static void
screenshot_application_take_screenshot_finish (ScreenshotApplication* self,
                                               GAsyncResult* _res_)
{
	ScreenshotApplicationTakeScreenshotData* _data_;
#line 20 "../src/Application.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 580 "Application.c"
}

static void
screenshot_application_take_screenshot_ready (GObject* source_object,
                                              GAsyncResult* _res_,
                                              gpointer _user_data_)
{
	ScreenshotApplicationTakeScreenshotData* _data_;
#line 111 "../src/Application.vala"
	_data_ = _user_data_;
#line 111 "../src/Application.vala"
	_data_->_source_object_ = source_object;
#line 111 "../src/Application.vala"
	_data_->_res_ = _res_;
#line 111 "../src/Application.vala"
	screenshot_application_take_screenshot_co (_data_);
#line 597 "Application.c"
}

static gboolean
screenshot_application_take_screenshot_co (ScreenshotApplicationTakeScreenshotData* _data_)
{
#line 105 "../src/Application.vala"
	switch (_data_->_state_) {
#line 105 "../src/Application.vala"
		case 0:
#line 607 "Application.c"
		goto _state_0;
#line 105 "../src/Application.vala"
		case 1:
#line 611 "Application.c"
		goto _state_1;
		default:
#line 105 "../src/Application.vala"
		g_assert_not_reached ();
#line 616 "Application.c"
	}
	_state_0:
#line 106 "../src/Application.vala"
	g_application_hold ((GApplication*) _data_->self);
#line 108 "../src/Application.vala"
	_data_->_tmp0_ = xdp_portal_new ();
#line 108 "../src/Application.vala"
	_data_->portal = _data_->_tmp0_;
#line 625 "Application.c"
	{
#line 111 "../src/Application.vala"
		_data_->_tmp1_ = _data_->portal;
#line 111 "../src/Application.vala"
		_data_->_state_ = 1;
#line 111 "../src/Application.vala"
		xdp_portal_take_screenshot (_data_->_tmp1_, NULL, XDP_SCREENSHOT_FLAG_INTERACTIVE, NULL, screenshot_application_take_screenshot_ready, _data_);
#line 111 "../src/Application.vala"
		return FALSE;
#line 635 "Application.c"
		_state_1:
#line 111 "../src/Application.vala"
		_data_->_tmp2_ = xdp_portal_take_screenshot_finish (_data_->_tmp1_, _data_->_res_, &_data_->_inner_error0_);
#line 111 "../src/Application.vala"
		_data_->file_uri = _data_->_tmp2_;
#line 111 "../src/Application.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 643 "Application.c"
			goto __catch0_g_error;
		}
#line 113 "../src/Application.vala"
		_data_->_tmp4_ = _data_->file_uri;
#line 113 "../src/Application.vala"
		_data_->_tmp5_ = g_filename_from_uri (_data_->_tmp4_, NULL, &_data_->_inner_error0_);
#line 113 "../src/Application.vala"
		_data_->_tmp3_ = _data_->_tmp5_;
#line 113 "../src/Application.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 113 "../src/Application.vala"
			_g_free0 (_data_->file_uri);
#line 656 "Application.c"
			goto __catch0_g_error;
		}
#line 113 "../src/Application.vala"
		_data_->_tmp6_ = gdk_pixbuf_new_from_file (_data_->_tmp3_, &_data_->_inner_error0_);
#line 113 "../src/Application.vala"
		_data_->pixbuf = _data_->_tmp6_;
#line 113 "../src/Application.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 113 "../src/Application.vala"
			_g_free0 (_data_->_tmp3_);
#line 113 "../src/Application.vala"
			_g_free0 (_data_->file_uri);
#line 669 "Application.c"
			goto __catch0_g_error;
		}
#line 115 "../src/Application.vala"
		_data_->_tmp7_ = _data_->pixbuf;
#line 115 "../src/Application.vala"
		screenshot_application_show_save_dialog (_data_->self, _data_->_tmp7_);
#line 110 "../src/Application.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 110 "../src/Application.vala"
		_g_free0 (_data_->_tmp3_);
#line 110 "../src/Application.vala"
		_g_free0 (_data_->file_uri);
#line 682 "Application.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 110 "../src/Application.vala"
		_data_->e = _data_->_inner_error0_;
#line 110 "../src/Application.vala"
		_data_->_inner_error0_ = NULL;
#line 117 "../src/Application.vala"
		_data_->_tmp8_ = _data_->e;
#line 117 "../src/Application.vala"
		_data_->_tmp9_ = _data_->_tmp8_->message;
#line 117 "../src/Application.vala"
		g_warning ("Application.vala:117: Failed to take screenshot via portal: %s", _data_->_tmp9_);
#line 110 "../src/Application.vala"
		_g_error_free0 (_data_->e);
#line 699 "Application.c"
	}
	__finally0:
	{
#line 119 "../src/Application.vala"
		g_application_release ((GApplication*) _data_->self);
#line 705 "Application.c"
	}
#line 110 "../src/Application.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 110 "../src/Application.vala"
		_g_object_unref0 (_data_->portal);
#line 110 "../src/Application.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error0_->message, g_quark_to_string (_data_->_inner_error0_->domain), _data_->_inner_error0_->code);
#line 110 "../src/Application.vala"
		g_clear_error (&_data_->_inner_error0_);
#line 110 "../src/Application.vala"
		g_object_unref (_data_->_async_result);
#line 110 "../src/Application.vala"
		return FALSE;
#line 719 "Application.c"
	}
#line 105 "../src/Application.vala"
	_g_object_unref0 (_data_->portal);
#line 105 "../src/Application.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 105 "../src/Application.vala"
	if (_data_->_state_ != 0) {
#line 105 "../src/Application.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 105 "../src/Application.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 731 "Application.c"
		}
	}
#line 105 "../src/Application.vala"
	g_object_unref (_data_->_async_result);
#line 105 "../src/Application.vala"
	return FALSE;
#line 738 "Application.c"
}

static void
screenshot_application_take_screenshot_backend_data_free (gpointer _data)
{
	ScreenshotApplicationTakeScreenshotBackendData* _data_;
	_data_ = _data;
#line 20 "../src/Application.vala"
	_g_object_unref0 (_data_->self);
#line 20 "../src/Application.vala"
	g_slice_free (ScreenshotApplicationTakeScreenshotBackendData, _data_);
#line 750 "Application.c"
}

static void
screenshot_application_take_screenshot_backend (ScreenshotApplication* self,
                                                ScreenshotCaptureType capture_type,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_)
{
	ScreenshotApplicationTakeScreenshotBackendData* _data_;
	ScreenshotApplication* _tmp0_;
#line 20 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 20 "../src/Application.vala"
	_data_ = g_slice_new0 (ScreenshotApplicationTakeScreenshotBackendData);
#line 20 "../src/Application.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 20 "../src/Application.vala"
	g_task_set_task_data (_data_->_async_result, _data_, screenshot_application_take_screenshot_backend_data_free);
#line 20 "../src/Application.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 20 "../src/Application.vala"
	_data_->self = _tmp0_;
#line 20 "../src/Application.vala"
	_data_->capture_type = capture_type;
#line 20 "../src/Application.vala"
	screenshot_application_take_screenshot_backend_co (_data_);
#line 777 "Application.c"
}

static void
screenshot_application_take_screenshot_backend_finish (ScreenshotApplication* self,
                                                       GAsyncResult* _res_)
{
	ScreenshotApplicationTakeScreenshotBackendData* _data_;
#line 20 "../src/Application.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 787 "Application.c"
}

static void
screenshot_application_take_screenshot_backend_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_)
{
	ScreenshotApplicationTakeScreenshotBackendData* _data_;
#line 129 "../src/Application.vala"
	_data_ = _user_data_;
#line 129 "../src/Application.vala"
	_data_->_source_object_ = source_object;
#line 129 "../src/Application.vala"
	_data_->_res_ = _res_;
#line 129 "../src/Application.vala"
	screenshot_application_take_screenshot_backend_co (_data_);
#line 804 "Application.c"
}

static gboolean
screenshot_application_take_screenshot_backend_co (ScreenshotApplicationTakeScreenshotBackendData* _data_)
{
#line 123 "../src/Application.vala"
	switch (_data_->_state_) {
#line 123 "../src/Application.vala"
		case 0:
#line 814 "Application.c"
		goto _state_0;
#line 123 "../src/Application.vala"
		case 1:
#line 818 "Application.c"
		goto _state_1;
		default:
#line 123 "../src/Application.vala"
		g_assert_not_reached ();
#line 823 "Application.c"
	}
	_state_0:
#line 124 "../src/Application.vala"
	g_application_hold ((GApplication*) _data_->self);
#line 126 "../src/Application.vala"
	_data_->_tmp0_ = screenshot_screenshot_backend_new ();
#line 126 "../src/Application.vala"
	_data_->backend = _data_->_tmp0_;
#line 832 "Application.c"
	{
#line 129 "../src/Application.vala"
		_data_->_tmp1_ = _data_->backend;
#line 129 "../src/Application.vala"
		_data_->_state_ = 1;
#line 129 "../src/Application.vala"
		screenshot_screenshot_backend_capture (_data_->_tmp1_, _data_->capture_type, screenshot_application_delay, screenshot_application_grab_pointer, screenshot_application_redact, screenshot_application_take_screenshot_backend_ready, _data_);
#line 129 "../src/Application.vala"
		return FALSE;
#line 842 "Application.c"
		_state_1:
#line 129 "../src/Application.vala"
		_data_->_tmp2_ = screenshot_screenshot_backend_capture_finish (_data_->_tmp1_, _data_->_res_, &_data_->_inner_error0_);
#line 129 "../src/Application.vala"
		_data_->pixbuf = _data_->_tmp2_;
#line 129 "../src/Application.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 129 "../src/Application.vala"
			if (g_error_matches (_data_->_inner_error0_, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
#line 852 "Application.c"
				goto __catch0_g_io_error_cancelled;
			}
			goto __catch0_g_error;
		}
#line 131 "../src/Application.vala"
		_data_->_tmp3_ = _data_->pixbuf;
#line 131 "../src/Application.vala"
		if (_data_->_tmp3_ != NULL) {
#line 132 "../src/Application.vala"
			_data_->_tmp4_ = _data_->pixbuf;
#line 132 "../src/Application.vala"
			screenshot_application_show_save_dialog (_data_->self, _data_->_tmp4_);
#line 865 "Application.c"
		}
#line 128 "../src/Application.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 869 "Application.c"
	}
	goto __finally0;
	__catch0_g_io_error_cancelled:
	{
#line 128 "../src/Application.vala"
		g_clear_error (&_data_->_inner_error0_);
#line 876 "Application.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 128 "../src/Application.vala"
		_data_->e = _data_->_inner_error0_;
#line 128 "../src/Application.vala"
		_data_->_inner_error0_ = NULL;
#line 137 "../src/Application.vala"
		_data_->_tmp5_ = _data_->e;
#line 137 "../src/Application.vala"
		_data_->_tmp6_ = _data_->_tmp5_->message;
#line 137 "../src/Application.vala"
		screenshot_application_show_error_dialog (_data_->self, _data_->_tmp6_);
#line 128 "../src/Application.vala"
		_g_error_free0 (_data_->e);
#line 893 "Application.c"
	}
	__finally0:
	{
#line 139 "../src/Application.vala"
		g_application_release ((GApplication*) _data_->self);
#line 899 "Application.c"
	}
#line 128 "../src/Application.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 128 "../src/Application.vala"
		_g_object_unref0 (_data_->backend);
#line 128 "../src/Application.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error0_->message, g_quark_to_string (_data_->_inner_error0_->domain), _data_->_inner_error0_->code);
#line 128 "../src/Application.vala"
		g_clear_error (&_data_->_inner_error0_);
#line 128 "../src/Application.vala"
		g_object_unref (_data_->_async_result);
#line 128 "../src/Application.vala"
		return FALSE;
#line 913 "Application.c"
	}
#line 123 "../src/Application.vala"
	_g_object_unref0 (_data_->backend);
#line 123 "../src/Application.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 123 "../src/Application.vala"
	if (_data_->_state_ != 0) {
#line 123 "../src/Application.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 123 "../src/Application.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 925 "Application.c"
		}
	}
#line 123 "../src/Application.vala"
	g_object_unref (_data_->_async_result);
#line 123 "../src/Application.vala"
	return FALSE;
#line 932 "Application.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result;
#line 1588 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1588 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1588 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1589 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1589 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 954 "Application.c"
	} else {
#line 1589 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 958 "Application.c"
	}
#line 1589 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1589 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 964 "Application.c"
	} else {
#line 1589 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 968 "Application.c"
	}
#line 1589 "glib-2.0.vapi"
	if (_tmp0_) {
#line 972 "Application.c"
		gchar* _tmp2_;
#line 1590 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1590 "glib-2.0.vapi"
		result = _tmp2_;
#line 1590 "glib-2.0.vapi"
		return result;
#line 980 "Application.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1593 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1593 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1593 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1593 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1593 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1593 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1593 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1593 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 1008 "Application.c"
				goto __catch0_g_regex_error;
			}
#line 1593 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1593 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1593 "glib-2.0.vapi"
			return NULL;
#line 1017 "Application.c"
		}
#line 1594 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1594 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1594 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1594 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1594 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1594 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 1031 "Application.c"
				goto __catch0_g_regex_error;
			}
#line 1594 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1594 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1594 "glib-2.0.vapi"
			return NULL;
#line 1040 "Application.c"
		}
#line 1594 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1594 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1594 "glib-2.0.vapi"
		result = _tmp10_;
#line 1594 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1594 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1594 "glib-2.0.vapi"
		return result;
#line 1054 "Application.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1592 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1596 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 1063 "Application.c"
	}
	__finally0:
#line 1592 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1592 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1592 "glib-2.0.vapi"
	return NULL;
#line 1072 "Application.c"
}

static void
__lambda14_ (ScreenshotApplication* self,
             ScreenshotSaveDialog* dialog,
             gboolean response,
             const gchar* folder_dir,
             const gchar* output_name,
             const gchar* format)
{
	GError* _inner_error0_ = NULL;
#line 147 "../src/Application.vala"
	g_return_if_fail (dialog != NULL);
#line 147 "../src/Application.vala"
	g_return_if_fail (folder_dir != NULL);
#line 147 "../src/Application.vala"
	g_return_if_fail (output_name != NULL);
#line 147 "../src/Application.vala"
	g_return_if_fail (format != NULL);
#line 148 "../src/Application.vala"
	gtk_window_destroy ((GtkWindow*) dialog);
#line 150 "../src/Application.vala"
	if (response) {
#line 1096 "Application.c"
		gchar** formats = NULL;
		gchar* _tmp0_;
		gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar** _tmp5_;
		gint formats_length1;
		gint _formats_size_;
		gchar* output = NULL;
		gchar* _tmp6_;
		gchar** _tmp7_;
		gint _tmp7__length1;
#line 151 "../src/Application.vala"
		_tmp0_ = g_strdup (".png");
#line 151 "../src/Application.vala"
		_tmp1_ = g_strdup (".jpg");
#line 151 "../src/Application.vala"
		_tmp2_ = g_strdup (".jpeg");
#line 151 "../src/Application.vala"
		_tmp3_ = g_strdup (".bmp");
#line 151 "../src/Application.vala"
		_tmp4_ = g_strdup (".tiff");
#line 151 "../src/Application.vala"
		_tmp5_ = g_new0 (gchar*, 5 + 1);
#line 151 "../src/Application.vala"
		_tmp5_[0] = _tmp0_;
#line 151 "../src/Application.vala"
		_tmp5_[1] = _tmp1_;
#line 151 "../src/Application.vala"
		_tmp5_[2] = _tmp2_;
#line 151 "../src/Application.vala"
		_tmp5_[3] = _tmp3_;
#line 151 "../src/Application.vala"
		_tmp5_[4] = _tmp4_;
#line 151 "../src/Application.vala"
		formats = _tmp5_;
#line 151 "../src/Application.vala"
		formats_length1 = 5;
#line 151 "../src/Application.vala"
		_formats_size_ = formats_length1;
#line 152 "../src/Application.vala"
		_tmp6_ = g_strdup (output_name);
#line 152 "../src/Application.vala"
		output = _tmp6_;
#line 154 "../src/Application.vala"
		_tmp7_ = formats;
#line 154 "../src/Application.vala"
		_tmp7__length1 = formats_length1;
#line 1146 "Application.c"
		{
			gchar** type_collection = NULL;
			gint type_collection_length1 = 0;
			gint _type_collection_size_ = 0;
			gint type_it = 0;
#line 154 "../src/Application.vala"
			type_collection = _tmp7_;
#line 154 "../src/Application.vala"
			type_collection_length1 = _tmp7__length1;
#line 154 "../src/Application.vala"
			for (type_it = 0; type_it < type_collection_length1; type_it = type_it + 1) {
#line 1158 "Application.c"
				gchar* _tmp8_;
				gchar* type = NULL;
#line 154 "../src/Application.vala"
				_tmp8_ = g_strdup (type_collection[type_it]);
#line 154 "../src/Application.vala"
				type = _tmp8_;
#line 1165 "Application.c"
				{
					const gchar* _tmp9_;
					const gchar* _tmp10_;
					gchar* _tmp11_;
#line 155 "../src/Application.vala"
					_tmp9_ = output;
#line 155 "../src/Application.vala"
					_tmp10_ = type;
#line 155 "../src/Application.vala"
					_tmp11_ = string_replace (_tmp9_, _tmp10_, "");
#line 155 "../src/Application.vala"
					_g_free0 (output);
#line 155 "../src/Application.vala"
					output = _tmp11_;
#line 154 "../src/Application.vala"
					_g_free0 (type);
#line 1182 "Application.c"
				}
			}
		}
		{
			GdkPixbuf* _tmp12_;
			GdkPixbuf* _tmp13_;
			const gchar* _tmp14_;
			gchar* _tmp15_;
#line 159 "../src/Application.vala"
			_tmp12_ = screenshot_save_dialog_get_pixbuf (dialog);
#line 159 "../src/Application.vala"
			_tmp13_ = _tmp12_;
#line 159 "../src/Application.vala"
			_tmp14_ = output;
#line 159 "../src/Application.vala"
			_tmp15_ = g_strdup (folder_dir);
#line 159 "../src/Application.vala"
			screenshot_application_save_file (self, _tmp13_, _tmp14_, format, _tmp15_, &_inner_error0_);
#line 159 "../src/Application.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1203 "Application.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp16_;
			const gchar* _tmp17_;
#line 158 "../src/Application.vala"
			e = _inner_error0_;
#line 158 "../src/Application.vala"
			_inner_error0_ = NULL;
#line 161 "../src/Application.vala"
			_tmp16_ = e;
#line 161 "../src/Application.vala"
			_tmp17_ = _tmp16_->message;
#line 161 "../src/Application.vala"
			screenshot_application_show_error_dialog (self, _tmp17_);
#line 158 "../src/Application.vala"
			_g_error_free0 (e);
#line 1225 "Application.c"
		}
		__finally0:
#line 158 "../src/Application.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 158 "../src/Application.vala"
			_g_free0 (output);
#line 158 "../src/Application.vala"
			formats = (_vala_array_free (formats, formats_length1, (GDestroyNotify) g_free), NULL);
#line 158 "../src/Application.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 158 "../src/Application.vala"
			g_clear_error (&_inner_error0_);
#line 158 "../src/Application.vala"
			return;
#line 1240 "Application.c"
		}
#line 150 "../src/Application.vala"
		_g_free0 (output);
#line 150 "../src/Application.vala"
		formats = (_vala_array_free (formats, formats_length1, (GDestroyNotify) g_free), NULL);
#line 1246 "Application.c"
	} else {
#line 164 "../src/Application.vala"
		screenshot_application_take_screenshot (self, NULL, NULL);
#line 1250 "Application.c"
	}
}

static void
___lambda14__screenshot_save_dialog_save_response (ScreenshotSaveDialog* _sender,
                                                   gboolean response,
                                                   const gchar* folder_dir,
                                                   const gchar* output_name,
                                                   const gchar* format,
                                                   gpointer self)
{
#line 147 "../src/Application.vala"
	__lambda14_ ((ScreenshotApplication*) self, _sender, response, folder_dir, output_name, format);
#line 1264 "Application.c"
}

static void
screenshot_application_show_save_dialog (ScreenshotApplication* self,
                                         GdkPixbuf* pixbuf)
{
	ScreenshotSaveDialog* save_dialog = NULL;
	GSettings* _tmp0_;
	ScreenshotSaveDialog* _tmp1_;
#line 143 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 143 "../src/Application.vala"
	g_return_if_fail (pixbuf != NULL);
#line 144 "../src/Application.vala"
	_tmp0_ = self->priv->settings;
#line 144 "../src/Application.vala"
	_tmp1_ = screenshot_save_dialog_new (pixbuf, _tmp0_);
#line 144 "../src/Application.vala"
	g_object_ref_sink (_tmp1_);
#line 144 "../src/Application.vala"
	save_dialog = _tmp1_;
#line 145 "../src/Application.vala"
	gtk_window_set_application ((GtkWindow*) save_dialog, (GtkApplication*) self);
#line 147 "../src/Application.vala"
	g_signal_connect_object (save_dialog, "save-response", (GCallback) ___lambda14__screenshot_save_dialog_save_response, self, 0);
#line 168 "../src/Application.vala"
	gtk_window_present ((GtkWindow*) save_dialog);
#line 143 "../src/Application.vala"
	_g_object_unref0 (save_dialog);
#line 1294 "Application.c"
}

static void
screenshot_application_save_file (ScreenshotApplication* self,
                                  GdkPixbuf* pixbuf,
                                  const gchar* file_name,
                                  const gchar* format,
                                  gchar* folder_dir,
                                  GError** error)
{
	gchar* full_file_name = NULL;
	gchar* _tmp0_;
	gchar* folder_from_settings = NULL;
	gchar* _tmp1_;
	gint attempt = 0;
	const gchar* _tmp25_;
	GError* _inner_error0_ = NULL;
#line 171 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 171 "../src/Application.vala"
	g_return_if_fail (pixbuf != NULL);
#line 171 "../src/Application.vala"
	g_return_if_fail (file_name != NULL);
#line 171 "../src/Application.vala"
	g_return_if_fail (format != NULL);
#line 171 "../src/Application.vala"
	g_return_if_fail (folder_dir != NULL);
#line 172 "../src/Application.vala"
	if (pixbuf == NULL) {
#line 173 "../src/Application.vala"
		g_critical ("Application.vala:173: Pixbuf is null");
#line 174 "../src/Application.vala"
		_g_free0 (folder_dir);
#line 174 "../src/Application.vala"
		return;
#line 1330 "Application.c"
	}
#line 177 "../src/Application.vala"
	_tmp0_ = g_strdup ("");
#line 177 "../src/Application.vala"
	full_file_name = _tmp0_;
#line 178 "../src/Application.vala"
	_tmp1_ = g_strdup ("");
#line 178 "../src/Application.vala"
	folder_from_settings = _tmp1_;
#line 180 "../src/Application.vala"
	if (g_strcmp0 (folder_dir, "") == 0) {
#line 1342 "Application.c"
		GSettings* _tmp2_;
		gchar* _tmp3_;
		const gchar* _tmp4_;
#line 181 "../src/Application.vala"
		_tmp2_ = self->priv->settings;
#line 181 "../src/Application.vala"
		_tmp3_ = g_settings_get_string (_tmp2_, "folder-dir");
#line 181 "../src/Application.vala"
		_g_free0 (folder_from_settings);
#line 181 "../src/Application.vala"
		folder_from_settings = _tmp3_;
#line 182 "../src/Application.vala"
		_tmp4_ = folder_from_settings;
#line 182 "../src/Application.vala"
		if (g_strcmp0 (_tmp4_, "") != 0) {
#line 1358 "Application.c"
			const gchar* _tmp5_;
			gchar* _tmp6_;
#line 183 "../src/Application.vala"
			_tmp5_ = folder_from_settings;
#line 183 "../src/Application.vala"
			_tmp6_ = g_strdup (_tmp5_);
#line 183 "../src/Application.vala"
			_g_free0 (folder_dir);
#line 183 "../src/Application.vala"
			folder_dir = _tmp6_;
#line 1369 "Application.c"
		} else {
			const gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
			gchar* _tmp10_;
			gchar* _tmp11_;
			gchar* _tmp12_;
#line 185 "../src/Application.vala"
			_tmp7_ = g_get_user_special_dir (G_USER_DIRECTORY_PICTURES);
#line 185 "../src/Application.vala"
			_tmp8_ = g_strdup_printf ("%c", (gint) G_DIR_SEPARATOR);
#line 185 "../src/Application.vala"
			_tmp9_ = _tmp8_;
#line 185 "../src/Application.vala"
			_tmp10_ = g_strconcat (_tmp7_, _tmp9_, NULL);
#line 185 "../src/Application.vala"
			_tmp11_ = _tmp10_;
#line 185 "../src/Application.vala"
			_tmp12_ = g_strconcat (_tmp11_, SCREENSHOT_APPLICATION_SAVE_FOLDER, NULL);
#line 185 "../src/Application.vala"
			_g_free0 (folder_dir);
#line 185 "../src/Application.vala"
			folder_dir = _tmp12_;
#line 185 "../src/Application.vala"
			_g_free0 (_tmp11_);
#line 185 "../src/Application.vala"
			_g_free0 (_tmp9_);
#line 1397 "Application.c"
		}
#line 188 "../src/Application.vala"
		screenshot_application_create_dir_if_missing (folder_dir);
#line 1401 "Application.c"
	}
#line 191 "../src/Application.vala"
	attempt = 0;
#line 1405 "Application.c"
	{
		gboolean _tmp13_ = FALSE;
#line 193 "../src/Application.vala"
		_tmp13_ = TRUE;
#line 193 "../src/Application.vala"
		while (TRUE) {
#line 1412 "Application.c"
			gint _tmp24_;
#line 193 "../src/Application.vala"
			if (!_tmp13_) {
#line 1416 "Application.c"
				const gchar* _tmp14_;
				GFile* _tmp15_;
				GFile* _tmp16_;
				gboolean _tmp17_;
#line 201 "../src/Application.vala"
				_tmp14_ = full_file_name;
#line 201 "../src/Application.vala"
				_tmp15_ = g_file_new_for_path (_tmp14_);
#line 201 "../src/Application.vala"
				_tmp16_ = _tmp15_;
#line 201 "../src/Application.vala"
				_tmp17_ = !g_file_query_exists (_tmp16_, NULL);
#line 201 "../src/Application.vala"
				_g_object_unref0 (_tmp16_);
#line 201 "../src/Application.vala"
				if (_tmp17_) {
#line 201 "../src/Application.vala"
					break;
#line 1435 "Application.c"
				}
			}
#line 193 "../src/Application.vala"
			_tmp13_ = FALSE;
#line 194 "../src/Application.vala"
			if (attempt == 0) {
#line 1442 "Application.c"
				gchar* _tmp18_;
				gchar* _tmp19_;
				gchar* _tmp20_;
#line 195 "../src/Application.vala"
				_tmp18_ = g_strdup_printf ("%s.%s", file_name, format);
#line 195 "../src/Application.vala"
				_tmp19_ = _tmp18_;
#line 195 "../src/Application.vala"
				_tmp20_ = g_build_filename (folder_dir, _tmp19_, NULL);
#line 195 "../src/Application.vala"
				_g_free0 (full_file_name);
#line 195 "../src/Application.vala"
				full_file_name = _tmp20_;
#line 195 "../src/Application.vala"
				_g_free0 (_tmp19_);
#line 1458 "Application.c"
			} else {
				gchar* _tmp21_;
				gchar* _tmp22_;
				gchar* _tmp23_;
#line 197 "../src/Application.vala"
				_tmp21_ = g_strdup_printf ("%s (%d).%s", file_name, attempt, format);
#line 197 "../src/Application.vala"
				_tmp22_ = _tmp21_;
#line 197 "../src/Application.vala"
				_tmp23_ = g_build_filename (folder_dir, _tmp22_, NULL);
#line 197 "../src/Application.vala"
				_g_free0 (full_file_name);
#line 197 "../src/Application.vala"
				full_file_name = _tmp23_;
#line 197 "../src/Application.vala"
				_g_free0 (_tmp22_);
#line 1475 "Application.c"
			}
#line 200 "../src/Application.vala"
			_tmp24_ = attempt;
#line 200 "../src/Application.vala"
			attempt = _tmp24_ + 1;
#line 1481 "Application.c"
		}
	}
#line 203 "../src/Application.vala"
	_tmp25_ = full_file_name;
#line 203 "../src/Application.vala"
	gdk_pixbuf_save (pixbuf, _tmp25_, format, &_inner_error0_, NULL);
#line 203 "../src/Application.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 203 "../src/Application.vala"
		g_propagate_error (error, _inner_error0_);
#line 203 "../src/Application.vala"
		_g_free0 (folder_from_settings);
#line 203 "../src/Application.vala"
		_g_free0 (full_file_name);
#line 203 "../src/Application.vala"
		_g_free0 (folder_dir);
#line 203 "../src/Application.vala"
		return;
#line 1500 "Application.c"
	}
#line 171 "../src/Application.vala"
	_g_free0 (folder_from_settings);
#line 171 "../src/Application.vala"
	_g_free0 (full_file_name);
#line 171 "../src/Application.vala"
	_g_free0 (folder_dir);
#line 1508 "Application.c"
}

static void
_gtk_window_destroy_gtk_dialog_response (GtkDialog* _sender,
                                         gint response_id,
                                         gpointer self)
{
#line 215 "../src/Application.vala"
	gtk_window_destroy ((GtkWindow*) self);
#line 1518 "Application.c"
}

static void
screenshot_application_show_error_dialog (ScreenshotApplication* self,
                                          const gchar* error_message)
{
	GraniteMessageDialog* dialog = NULL;
	GraniteMessageDialog* _tmp0_;
#line 206 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 206 "../src/Application.vala"
	g_return_if_fail (error_message != NULL);
#line 207 "../src/Application.vala"
	_tmp0_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Could not capture screenshot"), _ ("Image not saved"), "dialog-error", GTK_BUTTONS_CLOSE);
#line 207 "../src/Application.vala"
	g_object_ref_sink (_tmp0_);
#line 207 "../src/Application.vala"
	dialog = _tmp0_;
#line 213 "../src/Application.vala"
	gtk_window_set_application ((GtkWindow*) dialog, (GtkApplication*) self);
#line 214 "../src/Application.vala"
	granite_message_dialog_show_error_details (dialog, error_message);
#line 215 "../src/Application.vala"
	g_signal_connect_object ((GtkDialog*) dialog, "response", (GCallback) _gtk_window_destroy_gtk_dialog_response, (GtkWindow*) dialog, 0);
#line 216 "../src/Application.vala"
	gtk_window_present ((GtkWindow*) dialog);
#line 206 "../src/Application.vala"
	_g_object_unref0 (dialog);
#line 1547 "Application.c"
}

static GError*
vala_g_io_error_from_errno (gint err_no)
{
	const gchar* _tmp0_;
	GError* _tmp1_;
	GError* result;
#line 5156 "gio-2.0.vapi"
	_tmp0_ = g_strerror (err_no);
#line 5156 "gio-2.0.vapi"
	_tmp1_ = g_error_new (g_io_error_quark (), g_io_error_from_errno (err_no), "%s", _tmp0_);
#line 5156 "gio-2.0.vapi"
	result = (GError*) _tmp1_;
#line 5156 "gio-2.0.vapi"
	return result;
#line 1564 "Application.c"
}

void
screenshot_application_create_dir_if_missing (const gchar* path)
{
#line 219 "../src/Application.vala"
	g_return_if_fail (path != NULL);
#line 220 "../src/Application.vala"
	if (mkdir (path, (mode_t) 0775) != 0) {
#line 1574 "Application.c"
		gint err_no = 0;
#line 221 "../src/Application.vala"
		err_no = errno;
#line 222 "../src/Application.vala"
		if (err_no != EEXIST) {
#line 1580 "Application.c"
			GError* _tmp0_;
			GError* _tmp1_;
			const gchar* _tmp2_;
#line 223 "../src/Application.vala"
			_tmp0_ = vala_g_io_error_from_errno (err_no);
#line 223 "../src/Application.vala"
			_tmp1_ = _tmp0_;
#line 223 "../src/Application.vala"
			_tmp2_ = _tmp1_->message;
#line 223 "../src/Application.vala"
			g_debug ("Application.vala:223: %s", _tmp2_);
#line 223 "../src/Application.vala"
			_g_error_free0 (_tmp1_);
#line 1594 "Application.c"
		}
	}
}

static gint
screenshot_application_main (gchar** args,
                             gint args_length1)
{
	ScreenshotApplication* _tmp0_;
	ScreenshotApplication* _tmp1_;
	gint _tmp2_;
	gint result;
#line 229 "../src/Application.vala"
	_tmp0_ = screenshot_application_new ();
#line 229 "../src/Application.vala"
	_tmp1_ = _tmp0_;
#line 229 "../src/Application.vala"
	_tmp2_ = g_application_run ((GApplication*) _tmp1_, (gint) args_length1, args);
#line 229 "../src/Application.vala"
	_g_object_unref0 (_tmp1_);
#line 229 "../src/Application.vala"
	result = _tmp2_;
#line 229 "../src/Application.vala"
	return result;
#line 1619 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 228 "../src/Application.vala"
	return screenshot_application_main (argv, argc);
#line 1628 "Application.c"
}

static GObject *
screenshot_application_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ScreenshotApplication * self;
#line 60 "../src/Application.vala"
	parent_class = G_OBJECT_CLASS (screenshot_application_parent_class);
#line 60 "../src/Application.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 60 "../src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_TYPE_APPLICATION, ScreenshotApplication);
#line 61 "../src/Application.vala"
	setlocale (LC_ALL, "");
#line 62 "../src/Application.vala"
	bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
#line 63 "../src/Application.vala"
	bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
#line 64 "../src/Application.vala"
	textdomain (GETTEXT_PACKAGE);
#line 66 "../src/Application.vala"
	g_application_add_main_option_entries ((GApplication*) self, SCREENSHOT_APPLICATION_OPTION_ENTRIES);
#line 60 "../src/Application.vala"
	return obj;
#line 1657 "Application.c"
}

static void
screenshot_application_class_init (ScreenshotApplicationClass * klass,
                                   gpointer klass_data)
{
#line 20 "../src/Application.vala"
	screenshot_application_parent_class = g_type_class_peek_parent (klass);
#line 20 "../src/Application.vala"
	g_type_class_adjust_private_offset (klass, &ScreenshotApplication_private_offset);
#line 20 "../src/Application.vala"
	((GApplicationClass *) klass)->startup = (void (*) (GApplication*)) screenshot_application_real_startup;
#line 20 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) screenshot_application_real_activate;
#line 20 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->constructor = screenshot_application_constructor;
#line 20 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->finalize = screenshot_application_finalize;
#line 1676 "Application.c"
}

static void
screenshot_application_instance_init (ScreenshotApplication * self,
                                      gpointer klass)
{
	GSettings* _tmp0_;
#line 20 "../src/Application.vala"
	self->priv = screenshot_application_get_instance_private (self);
#line 31 "../src/Application.vala"
	_tmp0_ = g_settings_new ("io.elementary.screenshot");
#line 31 "../src/Application.vala"
	self->priv->settings = _tmp0_;
#line 1690 "Application.c"
}

static void
screenshot_application_finalize (GObject * obj)
{
	ScreenshotApplication * self;
#line 20 "../src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SCREENSHOT_TYPE_APPLICATION, ScreenshotApplication);
#line 31 "../src/Application.vala"
	_g_object_unref0 (self->priv->settings);
#line 20 "../src/Application.vala"
	G_OBJECT_CLASS (screenshot_application_parent_class)->finalize (obj);
#line 1703 "Application.c"
}

static GType
screenshot_application_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ScreenshotApplicationClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) screenshot_application_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ScreenshotApplication), 0, (GInstanceInitFunc) screenshot_application_instance_init, NULL };
	GType screenshot_application_type_id;
	screenshot_application_type_id = g_type_register_static (gtk_application_get_type (), "ScreenshotApplication", &g_define_type_info, 0);
	ScreenshotApplication_private_offset = g_type_add_instance_private (screenshot_application_type_id, sizeof (ScreenshotApplicationPrivate));
	return screenshot_application_type_id;
}

GType
screenshot_application_get_type (void)
{
	static volatile gsize screenshot_application_type_id__once = 0;
	if (g_once_init_enter (&screenshot_application_type_id__once)) {
		GType screenshot_application_type_id;
		screenshot_application_type_id = screenshot_application_get_type_once ();
		g_once_init_leave (&screenshot_application_type_id__once, screenshot_application_type_id);
	}
	return screenshot_application_type_id__once;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

