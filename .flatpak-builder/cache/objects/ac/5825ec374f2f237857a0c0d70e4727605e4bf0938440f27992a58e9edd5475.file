/* CaptureType.c generated by valac 0.56.17, the Vala compiler
 * generated from CaptureType.vala, do not modify */

/*
* Copyright (c) 2014–2016 Fabio Zaramella <ffabio.96.x@gmail.com>
*               2017–2018 elementary LLC. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License version 3 as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	SCREENSHOT_CAPTURE_TYPE_SCREEN,
	SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW,
	SCREENSHOT_CAPTURE_TYPE_AREA
} ScreenshotCaptureType;

#define SCREENSHOT_TYPE_CAPTURE_TYPE (screenshot_capture_type_get_type ())

VALA_EXTERN GType screenshot_capture_type_get_type (void) G_GNUC_CONST ;

static GType
screenshot_capture_type_get_type_once (void)
{
	static const GEnumValue values[] = {{SCREENSHOT_CAPTURE_TYPE_SCREEN, "SCREENSHOT_CAPTURE_TYPE_SCREEN", "screen"}, {SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW, "SCREENSHOT_CAPTURE_TYPE_CURRENT_WINDOW", "current-window"}, {SCREENSHOT_CAPTURE_TYPE_AREA, "SCREENSHOT_CAPTURE_TYPE_AREA", "area"}, {0, NULL, NULL}};
	GType screenshot_capture_type_type_id;
	screenshot_capture_type_type_id = g_enum_register_static ("ScreenshotCaptureType", values);
	return screenshot_capture_type_type_id;
}

GType
screenshot_capture_type_get_type (void)
{
	static volatile gsize screenshot_capture_type_type_id__once = 0;
	if (g_once_init_enter (&screenshot_capture_type_type_id__once)) {
		GType screenshot_capture_type_type_id;
		screenshot_capture_type_type_id = screenshot_capture_type_get_type_once ();
		g_once_init_leave (&screenshot_capture_type_type_id__once, screenshot_capture_type_type_id);
	}
	return screenshot_capture_type_type_id__once;
}

